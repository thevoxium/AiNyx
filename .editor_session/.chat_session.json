{
  "conversation_history": [
    {
      "role": "user",
      "content": "User's question: hi summarize @app.py\n\nCurrent file contents:\nlet editor;\nlet openFiles = {};\nlet currentFile = '';\nlet currentPath = '/';\nlet expandedFolders = new Set();\n\nconst catppuccinMonacoTheme = {\n    base: 'vs-dark',\n    inherit: true,\n    rules: [\n        { token: '', foreground: 'cdd6f4', background: '1e1e2e' },\n        { token: 'keyword', foreground: 'cba6f7' },\n        { token: 'operator', foreground: '89dceb' },\n        { token: 'variable', foreground: 'f5e0dc' },\n        { token: 'function', foreground: '89b4fa' },\n        { token: 'comment', foreground: '6c7086' },\n        { token: 'number', foreground: 'fab387' },\n        { token: 'string', foreground: 'a6e3a1' },\n        { token: 'type', foreground: 'f9e2af' },\n        // HTML-specific\n        { token: 'tag', foreground: '89b4fa' },\n        { token: 'attribute.name', foreground: 'f9e2af' },\n        { token: 'attribute.value', foreground: 'a6e3a1' },\n        // CSS-specific\n        { token: 'selector', foreground: 'f5c2e7' },\n        { token: 'property', foreground: '89dceb' },\n        // Add more language-specific rules as needed\n    ],\n    colors: {\n        'editor.background': '#1e1e2e',\n        'editor.foreground': '#cdd6f4',\n        'editorLineNumber.foreground': '#6c7086',\n        'editorCursor.foreground': '#f5e0dc',\n        'editor.selectionBackground': '#45475a',\n        'editor.inactiveSelectionBackground': '#313244',\n        'editorIndentGuide.background': '#313244',\n        'editorIndentGuide.activeBackground': '#45475a',\n    }\n};\n\nfunction getLanguageFromFilename(filename) {\n    const extension = filename.split('.').pop().toLowerCase();\n    const languageMap = {\n        'js': 'javascript',\n        'py': 'python',\n        'html': 'html',\n        'css': 'css',\n        'json': 'json',\n        'md': 'markdown',\n        'cpp': 'cpp',\n        'c': 'c',\n        'h': 'cpp',\n        'hpp': 'cpp',\n        'txt': 'plaintext'\n        // Add more mappings as needed\n    };\n    return languageMap[extension] || 'plaintext';\n}\n\n\n\n\nfunction loadLanguageSupport(language) {\n    return new Promise((resolve) => {\n        switch (language) {\n            case 'javascript':\n            case 'typescript':\n                require(['vs/language/typescript/tsMode'], function (tsMode) {\n                    tsMode.setupTypeScript(monaco);\n                    tsMode.setupJavaScript(monaco);\n                    resolve();\n                });\n                break;\n            case 'css':\n                require(['vs/language/css/cssMode'], function (cssMode) {\n                    cssMode.setupCSS(monaco);\n                    resolve();\n                });\n                break;\n            case 'html':\n                require(['vs/language/html/htmlMode'], function (htmlMode) {\n                    htmlMode.setupHTML(monaco);\n                    resolve();\n                });\n                break;\n            case 'json':\n                require(['vs/language/json/jsonMode'], function (jsonMode) {\n                    jsonMode.setupJSON(monaco);\n                    resolve();\n                });\n                break;\n            case 'python':\n                require(['vs/basic-languages/python/python'], function (pyMode) {\n                    monaco.languages.setMonarchTokensProvider('python', pyMode.language);\n                    monaco.languages.setLanguageConfiguration('python', pyMode.conf);\n                    resolve();\n                });\n                break;\n            case 'cpp':\n            case 'c':\n                require(['vs/basic-languages/cpp/cpp'], function (cppMode) {\n                    monaco.languages.setMonarchTokensProvider('cpp', cppMode.language);\n                    monaco.languages.setLanguageConfiguration('cpp', cppMode.conf);\n                    resolve();\n                });\n                break;\n            case 'java':\n                require(['vs/basic-languages/java/java'], function (javaMode) {\n                    monaco.languages.setMonarchTokensProvider('java', javaMode.language);\n                    monaco.languages.setLanguageConfiguration('java', javaMode.conf);\n                    resolve();\n                });\n                break;\n            case 'markdown':\n                require(['vs/basic-languages/markdown/markdown'], function (mdMode) {\n                    monaco.languages.setMonarchTokensProvider('markdown', mdMode.language);\n                    monaco.languages.setLanguageConfiguration('markdown', mdMode.conf);\n                    resolve();\n                });\n                break;\n            case 'yaml':\n                require(['vs/basic-languages/yaml/yaml'], function (yamlMode) {\n                    monaco.languages.setMonarchTokensProvider('yaml', yamlMode.language);\n                    monaco.languages.setLanguageConfiguration('yaml', yamlMode.conf);\n                    resolve();\n                });\n                break;\n            case 'sql':\n                require(['vs/basic-languages/sql/sql'], function (sqlMode) {\n                    monaco.languages.setMonarchTokensProvider('sql', sqlMode.language);\n                    monaco.languages.setLanguageConfiguration('sql', sqlMode.conf);\n                    resolve();\n                });\n                break;\n            case 'powershell':\n                require(['vs/basic-languages/powershell/powershell'], function (psMode) {\n                    monaco.languages.setMonarchTokensProvider('powershell', psMode.language);\n                    monaco.languages.setLanguageConfiguration('powershell', psMode.conf);\n                    resolve();\n                });\n                break;\n            case 'csharp':\n                require(['vs/basic-languages/csharp/csharp'], function (csMode) {\n                    monaco.languages.setMonarchTokensProvider('csharp', csMode.language);\n                    monaco.languages.setLanguageConfiguration('csharp', csMode.conf);\n                    resolve();\n                });\n                break;\n            default:\n                console.warn(`Language support for ${language} is not explicitly defined.`);\n                resolve();\n        }\n    });\n}\n\n\n\n\nrequire.config({ paths: { vs: 'https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.30.1/min/vs' } });\nrequire(['vs/editor/editor.main'], function() {\n\n\n    monaco.editor.defineTheme('catppuccin-mocha', catppuccinMonacoTheme);\n    editor = monaco.editor.create(document.getElementById('editor'), {\n        value: '// Select a file to edit',\n        language: 'plaintext', \n        theme: 'catppuccin-mocha',\n        automaticLayout: true,\n        lineNumbers: 'on',\n        glyphMargin: false,\n        folding: false,\n        lineDecorationsWidth: 10,\n        lineNumbersMinChars: 3,\n        padding: {\n            top: 15\n        }\n    });\n\n    // Adjust editor layout after initialization\n    setTimeout(() => {\n        editor.layout();\n    }, 100);\n\n    // Add resize listener to ensure proper layout on window resize\n    window.addEventListener('resize', () => {\n        editor.layout();\n    });\n\n    browseDirectory('/');\n    initializeResizers();\n});\n\nfunction updateEditorLayout() {\n    if (editor) {\n        const editorElement = document.getElementById('editor');\n        const rect = editorElement.getBoundingClientRect();\n        editor.layout({\n            width: rect.width,\n            height: rect.height\n        });\n    }\n}\n\n\n\nlet isOpen = false;\nfunction toggleIO() {\n    isOpen = !isOpen;\n    document.getElementById('io-container').style.display = isOpen ? 'flex' : 'none';\n    // Add your logic here to actually open/close the I/O container\n}\n\nfunction updateDirectoryBrowser(data) {\n    const directoryList = document.getElementById('directory-list');\n    const currentPathElement = document.getElementById('current-path');\n    \n    currentPathElement.textContent = data.current_path;\n    directoryList.innerHTML = '';\n    console.log('UdfdfdffdffdfdfdfDB');\n    console.log(data.current_path)\n    if (data.current_path !== '/') {\n        const parentDir = document.createElement('div');\n        parentDir.textContent = '..';\n        parentDir.onclick = () => browseDirectory(data.current_path + '/..');\n        directoryList.appendChild(parentDir);\n    }\n\n    data.directories.forEach(dir => {\n        const dirElement = document.createElement('div');\n        dirElement.textContent = dir;\n        dirElement.onclick = () => browseDirectory(data.current_path + '/' + dir);\n        directoryList.appendChild(dirElement);\n    });\n\n    data.files.forEach(file => {\n        const fileElement = document.createElement('div');\n        fileElement.textContent = file;\n        fileElement.onclick = () => loadFile(data.current_path+'/'+file);\n        directoryList.appendChild(fileElement);\n    });\n}\n\nfunction selectDirectory(directory) {\n    fetch('/select_directory', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ directory: directory }),\n    })\n    .then(response => response.json())\n    .then(data => {\n        if (data.status === 'success') {\n            showNotification('Directory selected: ' + data.directory, 'success');\n            loadFileList();\n        } else {\n            showNotification('Error selecting directory: ' + data.message, 'error');\n        }\n    });\n}\n\n\n\n\n\nfunction loadFileList() {\n    fetch('/files')\n        .then(response => response.json())\n        .then(data => {\n            if (data.status === 'success') {\n                const fileList = document.getElementById('file-list');\n                fileList.innerHTML = '<h2>Files</h2>';\n                data.files.forEach(file => {\n                    const fileElement = document.createElement('div');\n                    fileElement.textContent = file;\n                    fileElement.onclick = () => loadFile(file);\n                    fileList.appendChild(fileElement);\n                });\n            } else {\n                showNotification('Error loading files: ' + data.message, 'error');\n            }\n        });\n}\n\n\n\n\n\n\n\n\nfunction saveCurrentFile() {\n    if (!currentFile) {\n        showNotification('No file selected', 'error');\n        return;\n    }\n    const content = editor.getValue();\n    fetch('/save', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ filename: currentFile, content: content }),\n    })\n    .then(response => response.json())\n    .then(data => {\n        if (data.status === 'success') {\n            showNotification('File saved successfully', 'success');\n            updateGitInfo(); \n        } else {\n            showNotification('Error saving file: ' + data.message, 'error');\n        }\n    });\n}\n\nfunction runCode() {\n    if (!currentFile || (!currentFile.endsWith('.cpp') && !currentFile.endsWith('.py'))) {\n        showNotification('Please select a C++ or Python file to run', 'error');\n        return;\n    }\n    \n    // Save the file before running\n    saveCurrentFile();\n    \n    const outputElement = document.getElementById('output-area');\n    outputElement.textContent = 'Running...';\n    \n    const input = document.getElementById('input-area').value;\n    \n    fetch('/run', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ filename: currentFile, input: input }),\n    })\n    .then(response => response.json())\n    .then(data => {\n        let outputContent = data.output || 'No output';\n        if (data.status === 'error') {\n            outputContent = 'Error: ' + outputContent;\n        }\n        outputElement.textContent = outputContent;\n    })\n    .catch(error => {\n        outputElement.textContent = 'Error: ' + error.message;\n    });\n}\n\nfunction showNotification(message, type) {\n    const notification = document.getElementById('save-notification');\n    notification.textContent = message;\n    notification.className = type;\n    notification.style.display = 'inline';\n    setTimeout(() => {\n        notification.style.display = 'none';\n    }, 3000);\n}\n\nfunction initializeResizers() {\n    const sidebar = document.getElementById('sidebar');\n    const editorContainer = document.getElementById('editor-container');\n    const ioContainer = document.getElementById('io-container');\n    const chatContainer = document.getElementById('chat-container');\n    const terminalContainer = document.getElementById('terminal-container');\n    const resizer1 = document.getElementById('resizer-1');\n    const resizer2 = document.getElementById('resizer-2');\n    const resizer3 = document.getElementById('resizer-3');\n    const resizer4 = document.getElementById('resizer-4');\n\n    const minWidth = 100; // Minimum width for any container\n\n    let isResizing = false;\n    let currentResizer;\n\n    function startResize(e, resizer) {\n        isResizing = true;\n        currentResizer = resizer;\n        document.addEventListener('mousemove', resize);\n        document.addEventListener('mouseup', stopResize);\n    }\n\n    function resize(e) {\n        if (!isResizing) return;\n\n        const containerWidth = window.innerWidth;\n\n        if (currentResizer === resizer1) {\n            const newSidebarWidth = Math.max(minWidth, e.clientX);\n            sidebar.style.width = `${newSidebarWidth}px`;\n            editorContainer.style.width = `${containerWidth - newSidebarWidth - ioContainer.offsetWidth - chatContainer.offsetWidth - terminalContainer.offsetWidth}px`;\n        } else if (currentResizer === resizer2) {\n            const newIoContainerWidth = Math.max(minWidth, containerWidth - e.clientX - chatContainer.offsetWidth - terminalContainer.offsetWidth);\n            ioContainer.style.width = `${newIoContainerWidth}px`;\n            editorContainer.style.width = `${containerWidth - sidebar.offsetWidth - newIoContainerWidth - chatContainer.offsetWidth - terminalContainer.offsetWidth}px`;\n        } else if (currentResizer === resizer3) {\n            const newChatContainerWidth = Math.max(minWidth, containerWidth - e.clientX - terminalContainer.offsetWidth);\n            chatContainer.style.width = `${newChatContainerWidth}px`;\n            editorContainer.style.width = `${containerWidth - sidebar.offsetWidth - ioContainer.offsetWidth - newChatContainerWidth - terminalContainer.offsetWidth}px`;\n        } else if (currentResizer === resizer4) {\n            const newTerminalContainerWidth = Math.max(minWidth, containerWidth - e.clientX);\n            terminalContainer.style.width = `${newTerminalContainerWidth}px`;\n            editorContainer.style.width = `${containerWidth - sidebar.offsetWidth - ioContainer.offsetWidth - chatContainer.offsetWidth - newTerminalContainerWidth}px`;\n        }\n\n        // Ensure the Monaco editor resizes properly\n        if (editor) {\n            editor.layout();\n        }\n\n        // Resize the terminal if it exists\n        if (terminal) {\n            terminal.fit();\n        }\n    }\n\n    function stopResize() {\n        isResizing = false;\n        document.removeEventListener('mousemove', resize);\n        document.removeEventListener('mouseup', stopResize);\n    }\n\n    resizer1.addEventListener('mousedown', (e) => startResize(e, resizer1));\n    resizer2.addEventListener('mousedown', (e) => startResize(e, resizer2));\n    resizer3.addEventListener('mousedown', (e) => startResize(e, resizer3));\n    resizer4.addEventListener('mousedown', (e) => startResize(e, resizer4));\n}\n\nfunction toggleChat() {\n    const chatContainer = document.getElementById('chat-container');\n    const editorContainer = document.getElementById('editor-container');\n    const ioContainer = document.getElementById('io-container');\n    const chatInputArea = document.getElementById('chat-input-area');\n    \n    if (chatContainer.style.display === 'none' || chatContainer.style.display === '') {\n        chatContainer.style.display = 'flex';\n        editorContainer.style.width = 'calc(100% - 500px)';  // Adjust width for chat\n        ioContainer.style.width = '250px';  // Reduce IO container width\n        \n        // Add event listener when chat is opened\n        if (chatInputArea) {\n            chatInputArea.addEventListener('keypress', handleChatInputKeypress);\n        }\n    } else {\n        chatContainer.style.display = 'none';\n        editorContainer.style.width = 'calc(100% - 250px)';  // Restore original width\n        ioContainer.style.width = '250px';  // Restore original IO container width\n        \n        // Remove event listener when chat is closed\n        if (chatInputArea) {\n            chatInputArea.removeEventListener('keypress', handleChatInputKeypress);\n        }\n    }\n    \n    if (editor) {\n        editor.layout();\n    }\n}\n\nfunction handleChatInputKeypress(e) {\n    console.log(\"hello\");\n    if (e.key === 'Enter' && !e.shiftKey) {\n        e.preventDefault();\n        sendMessage();\n    }\n}\n\nfunction sendMessage() {\n    const chatInputArea = document.getElementById('chat-input-area');\n    const message = chatInputArea.innerText.trim();\n    if (message) {\n        addMessageToChat('user', message);\n        chatInputArea.innerText = '';\n\n        const currentCode = editor.getValue();\n        const taggedFiles = parseTaggedFiles(message);\n\n        fetch('/chat', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ \n                code: currentCode, \n                message: message,\n                taggedFiles: taggedFiles\n            }),\n        })\n        .then(response => response.json())\n        .then(data => {\n            if (data.status === 'success') {\n                addMessageToChat('ai', data.response);\n            } else {\n                addMessageToChat('ai', 'Error: ' + data.message);\n            }\n        })\n        .catch(error => {\n            console.error('Error:', error);\n            addMessageToChat('ai', 'An error occurred while processing your request.');\n        });\n    }\n}\n\nfunction parseTaggedFiles(message) {\n    const regex = /@([\\w./]+(?:\\.\\w+)?)/g;\n    const matches = message.match(regex);\n    return matches ? matches.map(match => match.slice(1)) : [];\n}\n\nfunction highlightTaggedFiles(message) {\n    const regex = /@([\\w./]+(?:\\.\\w+)?)/g;\n    return message.replace(regex, '<span class=\"tagged-file\">$&</span>');\n}\nfunction addMessageToChat(sender, content) {\n    const chatMessages = document.getElementById('chat-messages');\n    const messageElement = document.createElement('div');\n    messageElement.classList.add('chat-message', sender + '-message');\n    \n    if (sender === 'user') {\n        // Highlight tagged files in user messages\n        content = highlightTaggedFiles(content);\n        messageElement.innerHTML = content;\n    } else if (sender === 'ai') {\n        messageElement.innerHTML = marked.parse(content);\n        \n        // Apply syntax highlighting to code blocks\n        messageElement.querySelectorAll('pre code').forEach((block) => {\n            hljs.highlightElement(block);\n        });\n    }\n    \n    chatMessages.appendChild(messageElement);\n    chatMessages.scrollTop = chatMessages.scrollHeight;\n}\n\n\n\n\n\n\n\nfunction updateHardwareStats() {\n    fetch('/hardware_stats')\n        .then(response => {\n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n            return response.json();\n        })\n        .then(data => {\n            console.log(\"Received hardware stats:\", data);\n            \n            const cpuElement = document.querySelector('#cpu-usage span');\n            const memoryElement = document.querySelector('#memory-usage span');\n            const diskElement = document.querySelector('#disk-usage span');\n            \n            if (cpuElement && memoryElement && diskElement) {\n                cpuElement.textContent = `${data.cpu_usage}%`;\n                memoryElement.textContent = `${data.memory_used}/${data.memory_total}GB`;\n                diskElement.textContent = `${data.disk_used}/${data.disk_total}GB`;\n                console.log(\"Updated DOM with new stats\");\n            } else {\n                console.error(\"One or more DOM elements not found\");\n            }\n        })\n        .catch(error => {\n            console.error('Error fetching hardware stats:', error);\n        });\n}\n\n// Update hardware stats every 5 seconds\nconst statsInterval = setInterval(updateHardwareStats, 5000);\n\n// Call updateHardwareStats immediately to populate initial values\nupdateHardwareStats();\n\n// Add this function to stop updating stats when the page is hidden\ndocument.addEventListener('visibilitychange', () => {\n    if (document.hidden) {\n        clearInterval(statsInterval);\n    } else {\n        updateHardwareStats();\n        setInterval(updateHardwareStats, 5000);\n    }\n});\n\n\nlet terminal;\nlet socket;\nlet currentLine = '';\nconst PROMPT = '$ ';\n\ndocument.addEventListener('DOMContentLoaded', function() {\n    initializeTerminal();\n});\n\n\nfunction initializeTerminal() {\n    terminal = new Terminal({\n        cursorBlink: true,\n        scrollback: 1000,\n        cols: 80,\n        rows: 24\n    });\n    terminal.open(document.getElementById('terminal'));\n    \n    // Initialize Socket.IO\n    socket = io('/terminal');\n\n    socket.on('connect', function() {\n        console.log('Socket connected');\n        terminal.write('\\r\\n*** Connected to terminal ***\\r\\n');\n        writePrompt();\n    });\n\n    socket.on('output', function(data) {\n        console.log('Received output:', data);\n        terminal.write(data);\n        writePrompt();\n    });\n\n    socket.on('disconnect', function() {\n        console.log('Socket disconnected');\n        terminal.write('\\r\\n*** Disconnected from terminal ***\\r\\n');\n    });\n\n    terminal.onKey(function(ev) {\n        const printable = !ev.domEvent.altKey && !ev.domEvent.ctrlKey && !ev.domEvent.metaKey;\n\n        if (ev.domEvent.keyCode === 13) { // Enter key\n            terminal.write('\\r\\n');\n            if (currentLine.trim().length > 0) {\n                sendCommand(currentLine);\n                currentLine = '';\n            } else {\n                writePrompt();\n            }\n        } else if (ev.domEvent.keyCode === 8) { // Backspace\n            if (currentLine.length > 0) {\n                currentLine = currentLine.slice(0, -1);\n                terminal.write('\\b \\b');\n            }\n        } else if (printable) {\n            currentLine += ev.key;\n            terminal.write(ev.key);\n        }\n    });\n\n    terminal.focus();\n}\n\nfunction writePrompt() {\n    terminal.write('\\r\\n' + PROMPT);\n    currentLine = '';\n}\n\nfunction sendCommand(command) {\n    console.log('Sending command:', command);\n    socket.emit('command', command);\n}\n\nfunction toggleTerminal() {\n    const terminalContainer = document.getElementById('terminal-container');\n    const ioContainer = document.getElementById('io-container');\n    if (terminalContainer.style.display === 'none') {\n        terminalContainer.style.display = 'flex';\n        terminal.focus();\n        ioContainer.style.display = 'none';\n    } else {\n        terminalContainer.style.display = 'none';\n    }\n}\n\n\n\n\nfunction browseDirectory() {\n    fetch('/browse_directory')\n        .then(response => response.json())\n        .then(data => {\n            if (data.status === 'success') {\n                console.log(\"Updated directory received\");\n                console.log(data.current_path);\n                console.log(data.directories);\n                fetchDirectoryStructure();\n                updateDirectoryBrowser(data);\n                updateGitInfo();\n            } else {\n                showNotification('Error browsing directory: ' + data.message, 'error');\n            }\n        });\n}\n\n\n\n\n\n\nfunction getGitDiff() {\n    fetch('/get_commits')\n        .then(response => response.json())\n        .then(data => {\n            if (data.status === 'success') {\n                populateCommitDropdown(data.commits);\n                showGitDiffPanel();\n                fetchDiff('HEAD');\n            } else {\n                showNotification('Error getting commits: ' + data.message, 'error');\n            }\n        })\n        .catch(error => {\n            showNotification('Error: ' + error.message, 'error');\n        });\n}\n\nfunction populateCommitDropdown(commits) {\n    const select = document.getElementById('commit-select');\n    select.innerHTML = '<option value=\"HEAD\">Current changes</option>';\n    commits.forEach(commit => {\n        const option = document.createElement('option');\n        option.value = commit.hash;\n        option.textContent = `${commit.hash.substring(0, 7)} - ${commit.message}`;\n        select.appendChild(option);\n    });\n    select.onchange = function() {\n        fetchDiff(this.value);\n    };\n}\n\nfunction fetchDiff(commitHash) {\n    fetch('/git_diff', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ commit_hash: commitHash }),\n    })\n    .then(response => response.json())\n    .then(data => {\n        if (data.status === 'success') {\n            document.getElementById('git-diff-content').innerHTML = data.diff;\n        } else {\n            showNotification('Error getting git diff: ' + data.message, 'error');\n        }\n    })\n    .catch(error => {\n        showNotification('Error: ' + error.message, 'error');\n    });\n}\n\n\nfunction showGitDiffPanel() {\n    document.getElementById('app').style.display = 'none';\n\n    // Show git diff container\n    document.getElementById('git-diff-container').style.display = 'flex';\n\n    // Prevent scrolling on the body\n    document.body.style.overflow = 'hidden';\n}\n\n\n\nfunction closeGitDiff() {\n    // Hide git diff container\n    document.getElementById('git-diff-container').style.display = 'none';\n\n    // Show the app container\n    document.getElementById('app').style.display = 'flex';\n\n    // Restore scrolling on the body\n    document.body.style.overflow = 'auto';\n}\n\n\n\n\n\n\nfunction getFileIcon(fileName) {\n    const extension = fileName.split('.').pop().toLowerCase();\n    switch (extension) {\n        case 'js':\n        case 'py':\n        case 'cpp':\n        case 'java':\n        case 'c':\n            return '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><path d=\"M13 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V9z\"></path><polyline points=\"13 2 13 9 20 9\"></polyline></svg>';\n        case 'html':\n            return '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><polyline points=\"4 7 4 4 20 4 20 7\"></polyline><line x1=\"9\" y1=\"20\" x2=\"15\" y2=\"20\"></line><line x1=\"12\" y1=\"4\" x2=\"12\" y2=\"20\"></line></svg>';\n        case 'txt':\n            return '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><path d=\"M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z\"></path><polyline points=\"14 2 14 8 20 8\"></polyline><line x1=\"16\" y1=\"13\" x2=\"8\" y2=\"13\"></line><line x1=\"16\" y1=\"17\" x2=\"8\" y2=\"17\"></line><polyline points=\"10 9 9 9 8 9\"></polyline></svg>';\n        default:\n            return '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><path d=\"M13 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V9z\"></path><polyline points=\"13 2 13 9 20 9\"></polyline></svg>';\n    }\n}\n\n\n\n\nfunction loadFile(fullPath) {\n    console.log('Loading file:', fullPath);\n    fetch(`/file/${encodeURIComponent(fullPath)}`)\n        .then(response => response.json())\n        .then(data => {\n            if (data.status === 'success') {\n                openFileTab(fullPath, data.content);\n            } else {\n                showNotification('Error loading file: ' + data.message, 'error');\n            }\n        })\n        .catch(error => {\n            showNotification('Error: ' + error.message, 'error');\n        });\n}\n\n\n\n\n\n\n\n\n\nlet commandPalette = null;\nlet commandInput = null;\nlet commandList = null;\n\ndocument.addEventListener('DOMContentLoaded', () => {\n    commandPalette = document.getElementById('command-palette');\n    commandInput = document.getElementById('command-input');\n    commandList = document.getElementById('command-list');\n\n    // Show command palette on Ctrl+P\n    document.addEventListener('keydown', (e) => {\n        if (e.ctrlKey && e.key === 'p') {\n            e.preventDefault();\n            showCommandPalette();\n        }\n    });\n\n    // Hide command palette when clicking outside\n    document.addEventListener('click', (e) => {\n        if (commandPalette && !commandPalette.contains(e.target)) {\n            hideCommandPalette();\n        }\n    });\n\n    // Prevent hiding when clicking inside the command palette\n    commandPalette.addEventListener('click', (e) => {\n        e.stopPropagation();\n    });\n\n    // Handle input changes\n    commandInput.addEventListener('input', handleCommandInput);\n\n    // Handle form submission\n    commandInput.addEventListener('keydown', (e) => {\n        if (e.key === 'Enter') {\n            e.preventDefault();\n            executeCommand(commandInput.value);\n        }\n    });\n});\n\nfunction showCommandPalette() {\n    commandPalette.classList.remove('hidden');\n    commandInput.focus();\n    \n    // Get the current selection from Monaco editor\n    const selection = editor.getSelection();\n    const selectedText = editor.getModel().getValueInRange(selection);\n    \n    // Store the selection for later use\n    commandPalette.dataset.selectionStartLineNumber = selection.startLineNumber;\n    commandPalette.dataset.selectionStartColumn = selection.startColumn;\n    commandPalette.dataset.selectionEndLineNumber = selection.endLineNumber;\n    commandPalette.dataset.selectionEndColumn = selection.endColumn;\n    commandPalette.dataset.selectedText = selectedText;\n}\n\n\n\n\nfunction hideCommandPalette() {\n    commandPalette.classList.add('hidden');\n    commandInput.value = '';\n}\n\nfunction handleCommandInput(e) {\n    const input = e.target.value.toLowerCase();\n    if (input.startsWith('add:')) {\n        commandList.innerHTML = '<li>Create a new file</li>';\n    } else if (input.startsWith('d:')) {\n        commandList.innerHTML = '<li>Delete a file</li>';\n    } else if (input.startsWith('r:')) {\n        commandList.innerHTML = '<li>Rename a file</li>';\n    } else if (input.startsWith('addf:')) {\n        commandList.innerHTML = '<li>Create a new folder</li>';\n    } else if (input.startsWith('df:')) {\n        commandList.innerHTML = '<li>Delete a folder</li>';\n    } else if (input.startsWith('rf:')) {\n        commandList.innerHTML = '<li>Rename a folder</li>';\n    } else if (input.startsWith('prompt:')){\n        commandList.innerHTML = '<li>Get AI suggestion for selected code</li>';\n    } else {\n        commandList.innerHTML = '';\n    }\n}\n\nfunction executeCommand(command) {\n    if (command.toLowerCase().startsWith('add:')) {\n        const filePath = command.slice(4).trim();\n        addNewFile(filePath);\n    } else if (command.toLowerCase().startsWith('d:')) {\n        const filePath = command.slice(2).trim();\n        deleteFile(filePath);\n    } else if (command.toLowerCase().startsWith('r:')) {\n        const paths = command.slice(2).split('->').map(p => p.trim());\n        if (paths.length === 2) {\n            renameFile(paths[0], paths[1]);\n        } else {\n            showNotification('Invalid rename command format. Use \"r: old_path -> new_path\"', 'error');\n        }\n    } else if (command.toLowerCase().startsWith('addf:')) {\n        const folderPath = command.slice(5).trim();\n        addNewFolder(folderPath);\n    } else if (command.toLowerCase().startsWith('df:')) {\n        const folderPath = command.slice(3).trim();\n        deleteFolder(folderPath);\n    } else if (command.toLowerCase().startsWith('rf:')) {\n        const paths = command.slice(3).split('->').map(p => p.trim());\n        if (paths.length === 2) {\n            renameFolder(paths[0], paths[1]);\n        } else {\n            showNotification('Invalid rename folder command format. Use \"rf: old_path -> new_path\"', 'error');\n        }\n    } else if (command.toLowerCase().startsWith('prompt:')) {\n        const prompt = command.slice(7).trim();\n        const selectedText = commandPalette.dataset.selectedText;\n        getAiSuggestion(prompt, selectedText);\n    }\n    hideCommandPalette();\n}\n\n\n\nfunction addNewFolder(folderPath) {\n    fetch('/add_folder', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ folder_path: folderPath })\n    })\n    .then(response => response.json())\n    .then(data => {\n        if (data.status === 'success') {\n            showNotification('Folder created successfully: ' + folderPath, 'success');\n            fetchDirectoryStructure();  // Refresh the file tree\n        } else {\n            showNotification('Error creating folder: ' + data.message, 'error');\n        }\n    })\n    .catch(error => {\n        showNotification('Error: ' + error.message, 'error');\n    });\n}\n\nfunction deleteFolder(folderPath) {\n    if (confirm(`Are you sure you want to delete the folder \"${folderPath}\" and all its contents?`)) {\n        fetch('/delete_folder', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ folder_path: folderPath })\n        })\n        .then(response => response.json())\n        .then(data => {\n            if (data.status === 'success') {\n                showNotification('Folder deleted successfully: ' + folderPath, 'success');\n                fetchDirectoryStructure();  // Refresh the file tree\n            } else {\n                showNotification('Error deleting folder: ' + data.message, 'error');\n            }\n        })\n        .catch(error => {\n            showNotification('Error: ' + error.message, 'error');\n        });\n    }\n}\n\nfunction renameFolder(oldPath, newPath) {\n    fetch('/rename_folder', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ old_path: oldPath, new_path: newPath })\n    })\n    .then(response => response.json())\n    .then(data => {\n        if (data.status === 'success') {\n            showNotification('Folder renamed successfully', 'success');\n            fetchDirectoryStructure();  // Refresh the file tree\n        } else {\n            showNotification('Error renaming folder: ' + data.message, 'error');\n        }\n    })\n    .catch(error => {\n        showNotification('Error: ' + error.message, 'error');\n    });\n}\n\n\n\nfunction getAiSuggestion(prompt, selectedCode) {\n    fetch('/ai_suggestion', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ prompt: prompt, code: selectedCode })\n    })\n    .then(response => response.json())\n    .then(data => {\n        if (data.status === 'success') {\n            replaceSelectedCode(data.suggestion);\n        } else {\n            showNotification('Error getting AI suggestion: ' + data.message, 'error');\n        }\n    })\n    .catch(error => {\n        showNotification('Error: ' + error.message, 'error');\n    });\n}\n\nfunction replaceSelectedCode(newCode) {\n    const startLineNumber = parseInt(commandPalette.dataset.selectionStartLineNumber);\n    const startColumn = parseInt(commandPalette.dataset.selectionStartColumn);\n    const endLineNumber = parseInt(commandPalette.dataset.selectionEndLineNumber);\n    const endColumn = parseInt(commandPalette.dataset.selectionEndColumn);\n\n    const range = new monaco.Range(startLineNumber, startColumn, endLineNumber, endColumn);\n    \n    editor.executeEdits('ai-suggestion', [{\n        range: range,\n        text: newCode,\n        forceMoveMarkers: true\n    }]);\n}\n\n\nfunction showNotification(message, type) {\n    console.log(`${type}: ${message}`);\n    // Implement a visual notification system here\n}\n\n\n\n\n\n\nfunction fetchDirectoryStructure() {\n    fetch('/get_directory_structure')\n        .then(response => response.json())\n        .then(data => {\n            if (data.status === 'success') {\n                console.log(\"Fetched new directory structure\");\n                updateFileTree(data.structure);\n            } else {\n                showNotification('Error fetching directory structure: ' + data.message, 'error');\n            }\n        })\n        .catch(error => {\n            showNotification('Error: ' + error.message, 'error');\n        });\n}\n\n\n\nfunction updateFileTree(structure) {\n    const fileTree = document.getElementById('file-tree');\n    const previouslyExpanded = new Set(expandedFolders);  // Create a copy\n    fileTree.innerHTML = ''; // Clear the existing tree\n    fileTree.appendChild(createFileTreeItem(structure, 0));\n    expandedFolders = previouslyExpanded;  // Restore the expanded folders\n    restoreExpandedFolders();\n}\nfunction createFileTreeItem(item, depth = 0) {\n    const itemElement = document.createElement('div');\n    itemElement.className = 'file-tree-item';\n    itemElement.style.paddingLeft = `${depth * 20}px`; // Indentation\n    itemElement.setAttribute('data-path', item.path);\n\n    const fullPath = item.path;\n    \n    const iconSvg = item.type === 'directory' \n        ? '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><path d=\"M22 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h5l2 3h9a2 2 0 0 1 2 2z\"></path></svg>'\n        : '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><path d=\"M13 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V9z\"></path><polyline points=\"13 2 13 9 20 9\"></polyline></svg>';\n\n    const itemContent = document.createElement('div');\n    itemContent.className = 'file-tree-item-content';\n    itemContent.innerHTML = `\n        <span class=\"file-tree-icon\">${iconSvg}</span>\n        <span class=\"file-tree-name\">${item.name}</span>\n    `;\n    itemElement.appendChild(itemContent);\n\n    if (item.type === 'directory') {\n        const childrenContainer = document.createElement('div');\n        childrenContainer.className = 'file-tree-children';\n        childrenContainer.style.display = 'none';\n\n        if (item.children && Array.isArray(item.children)) {\n            item.children.forEach(child => {\n                childrenContainer.appendChild(createFileTreeItem(child, depth + 1));\n            });\n        }\n\n        itemElement.appendChild(childrenContainer);\n\n        itemContent.addEventListener('click', (e) => {\n            e.stopPropagation();\n            toggleFolder(itemElement, fullPath);\n        });\n\n        // If the folder was previously expanded, expand it now\n        if (expandedFolders.has(fullPath)) {\n            toggleFolder(itemElement, fullPath);\n        }\n    } else {\n        itemContent.addEventListener('click', () => loadFile(fullPath));\n    }\n\n    return itemElement;\n}\n\n\nfunction toggleFolder(folderElement, fullPath, forceExpand = false) {\n    const childrenContainer = folderElement.querySelector('.file-tree-children');\n    if (childrenContainer) {\n        const isCurrentlyExpanded = childrenContainer.style.display === 'block';\n        const shouldExpand = forceExpand || !isCurrentlyExpanded;\n        \n        childrenContainer.style.display = shouldExpand ? 'block' : 'none';\n        folderElement.classList.toggle('expanded', shouldExpand);\n        \n        if (shouldExpand) {\n            expandedFolders.add(fullPath);\n        } else {\n            expandedFolders.delete(fullPath);\n        }\n        console.log(`Folder ${fullPath} is now ${shouldExpand ? 'expanded' : 'collapsed'}`);\n        console.log(\"Current expanded folders:\", Array.from(expandedFolders));\n    }\n}\n\nfunction restoreExpandedFolders() {\n    console.log(\"Restoring expanded folders...\");\n    console.log(\"Expanded folders before restore:\", Array.from(expandedFolders));\n    \n    expandedFolders.forEach(path => {\n        const folderElement = document.querySelector(`.file-tree-item[data-path=\"${path}\"]`);\n        if (folderElement) {\n            console.log(`Restoring folder: ${path}`);\n            toggleFolder(folderElement, path, true);  // Force expand\n        } else {\n            console.log(`Folder not found: ${path}`);\n            // Optional: Remove paths that no longer exist in the file structure\n            // expandedFolders.delete(path);\n        }\n    });\n    \n    console.log(\"Expanded folders after restore:\", Array.from(expandedFolders));\n}\n\n\nfunction openFileTab(filename, content) {\n    if (!document.querySelector(`.tab[data-filename=\"${filename}\"]`)) {\n        createTab(filename);\n    }\n    switchToTab(filename);\n    currentFile = filename;\n\n    const language = getLanguageFromFilename(filename);\n    \n    if (!openFiles[filename]) {\n        openFiles[filename] = {\n            model: monaco.editor.createModel(content, language)\n        };\n    }\n    \n    editor.setModel(openFiles[filename].model);\n    editor.updateOptions({ language: language });\n}\n\nfunction createTab(filename) {\n    const tabsContainer = document.getElementById('tabs-container');\n    const tab = document.createElement('div');\n    tab.className = 'tab';\n    tab.setAttribute('data-filename', filename);\n    tab.textContent = filename.split('/').pop(); // Show only the file name, not the full path\n    tab.onclick = () => switchToTab(filename);\n    \n    const closeButton = document.createElement('span');\n    closeButton.className = 'close-tab';\n    closeButton.textContent = '\u00d7';\n    closeButton.onclick = (e) => {\n        e.stopPropagation();\n        closeTab(filename);\n    };\n    \n    tab.appendChild(closeButton);\n    tabsContainer.appendChild(tab);\n}\n\nfunction switchToTab(filename) {\n    document.querySelectorAll('.tab').forEach(tab => tab.classList.remove('active'));\n    const tab = document.querySelector(`.tab[data-filename=\"${filename}\"]`);\n    if (tab) {\n        tab.classList.add('active');\n        if (openFiles[filename] && openFiles[filename].model) {\n            editor.setModel(openFiles[filename].model);\n        } else {\n            console.error('Model not found for file:', filename);\n        }\n    }\n}\n\nfunction closeTab(filename) {\n    const tab = document.querySelector(`.tab[data-filename=\"${filename}\"]`);\n    if (tab) {\n        tab.remove();\n        if (openFiles[filename] && openFiles[filename].model) {\n            openFiles[filename].model.dispose();\n        }\n        delete openFiles[filename];\n        if (Object.keys(openFiles).length > 0) {\n            switchToTab(Object.keys(openFiles)[0]);\n        } else {\n            editor.setModel(monaco.editor.createModel('', 'plaintext'));\n        }\n    }\n}\n\n\n\n\n\n\n\nfunction addNewFile(filePath) {\n    fetch('/add_file', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ file_path: filePath })\n    })\n    .then(response => response.json())\n    .then(data => {\n        if (data.status === 'success') {\n            showNotification('File created successfully: ' + filePath, 'success');\n            fetchDirectoryStructure();  // Refresh the file tree\n        } else {\n            showNotification('Error creating file: ' + data.message, 'error');\n        }\n    })\n    .catch(error => {\n        showNotification('Error: ' + error.message, 'error');\n    });\n}\n\nfunction renameFile(oldPath, newPath) {\n    fetch('/rename_file', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ old_path: oldPath, new_path: newPath })\n    })\n    .then(response => response.json())\n    .then(data => {\n        if (data.status === 'success') {\n            showNotification('File renamed successfully', 'success');\n            fetchDirectoryStructure();  // Refresh the file tree\n            if (openFiles[oldPath]) {\n                openFiles[newPath] = openFiles[oldPath];\n                delete openFiles[oldPath];\n                closeTab(oldPath);\n                openFileTab(newPath, openFiles[newPath]);\n            }\n        } else {\n            showNotification('Error renaming file: ' + data.message, 'error');\n        }\n    })\n    .catch(error => {\n        showNotification('Error: ' + error.message, 'error');\n    });\n}\n\nfunction deleteFile(filePath) {\n    if (confirm(`Are you sure you want to delete \"${filePath}\"?`)) {\n        fetch('/delete_file', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ file_path: filePath })\n        })\n        .then(response => response.json())\n        .then(data => {\n            if (data.status === 'success') {\n                showNotification('File deleted successfully: ' + filePath, 'success');\n                fetchDirectoryStructure();  // Refresh the file tree\n                closeTab(filePath);  // Close the tab if the file was open\n            } else {\n                showNotification('Error deleting file: ' + data.message, 'error');\n            }\n        })\n        .catch(error => {\n            showNotification('Error: ' + error.message, 'error');\n        });\n    }\n}\n\n\n\n\nlet currentModel = \"openai/gpt-4o-mini\";\n\ndocument.addEventListener('DOMContentLoaded', function() {\n    const modelMenuTrigger = document.getElementById('model-menu-trigger');\n    const modelMenu = document.getElementById('model-menu');\n    const modelOptions = document.querySelectorAll('.model-option');\n\n    modelMenuTrigger.addEventListener('click', function(e) {\n        e.stopPropagation();\n        modelMenu.classList.toggle('hidden');\n    });\n\n    document.addEventListener('click', function() {\n        modelMenu.classList.add('hidden');\n    });\n\n    modelOptions.forEach(option => {\n        option.addEventListener('click', function() {\n            currentModel = this.dataset.model;\n            modelMenu.classList.add('hidden');\n            console.log('Selected model:', currentModel);\n        });\n    });\n});\n\nfunction sendMessage() {\n    const chatInputArea = document.getElementById('chat-input-area');\n    const message = chatInputArea.innerText.trim();\n    if (message) {\n        addMessageToChat('user', message);\n        chatInputArea.innerText = '';\n\n        const currentCode = editor.getValue();\n        const taggedFiles = parseTaggedFiles(message);\n\n        fetch('/chat', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ \n                code: currentCode, \n                message: message,\n                taggedFiles: taggedFiles,\n                model: currentModel\n            }),\n        })\n        .then(response => response.json())\n        .then(data => {\n            if (data.status === 'success') {\n                addMessageToChat('ai', data.response);\n            } else {\n                addMessageToChat('ai', 'Error: ' + data.message);\n            }\n        })\n        .catch(error => {\n            console.error('Error:', error);\n            addMessageToChat('ai', 'An error occurred while processing your request.');\n        });\n    }\n}\n\n\n\n\n\nfunction updateGitInfo() {\n    fetch('/git_info')\n        .then(response => response.json())\n        .then(data => {\n            if (data.status === 'success') {\n                const gitStatusBar = document.getElementById('git-status-bar');\n                gitStatusBar.innerHTML = `\n                    <span title=\"Current Branch\">\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n                            <line x1=\"6\" y1=\"3\" x2=\"6\" y2=\"15\"></line>\n                            <circle cx=\"18\" cy=\"6\" r=\"3\"></circle>\n                            <circle cx=\"6\" cy=\"18\" r=\"3\"></circle>\n                            <path d=\"M18 9a9 9 0 0 1-9 9\"></path>\n                        </svg>\n                        ${data.branch}\n                    </span>\n                    <span title=\"Latest Commit\">\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n                            <circle cx=\"12\" cy=\"12\" r=\"4\"></circle>\n                            <line x1=\"1.05\" y1=\"12\" x2=\"7\" y2=\"12\"></line>\n                            <line x1=\"17.01\" y1=\"12\" x2=\"22.96\" y2=\"12\"></line>\n                        </svg>\n                        ${data.commit}\n                    </span>\n                    <span title=\"Modified Files\">\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n                            <path d=\"M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z\"></path>\n                            <polyline points=\"14 2 14 8 20 8\"></polyline>\n                            <line x1=\"12\" y1=\"18\" x2=\"12\" y2=\"12\"></line>\n                            <line x1=\"9\" y1=\"15\" x2=\"15\" y2=\"15\"></line>\n                        </svg>\n                        ${data.modified_files}\n                    </span>\n                    <span title=\"Unpushed Commits\">\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n                            <line x1=\"12\" y1=\"19\" x2=\"12\" y2=\"5\"></line>\n                            <polyline points=\"5 12 12 5 19 12\"></polyline>\n                        </svg>\n                        ${data.unpushed_commits}\n                    </span>\n                `;\n            } else {\n                console.error('Failed to fetch Git info:', data.message);\n            }\n        })\n        .catch(error => {\n            console.error('Error fetching Git info:', error);\n        });\n}\n\n\n\nfunction clearChatSession() {\n    fetch('/clear_chat_session', {\n        method: 'POST',\n    })\n    .then(response => response.json())\n    .then(data => {\n        if (data.status === 'success') {\n            showNotification('Chat session cleared', 'success');\n            // Clear the chat messages in the UI\n            document.getElementById('chat-messages').innerHTML = '';\n        } else {\n            showNotification('Error clearing chat session: ' + data.message, 'error');\n        }\n    })\n    .catch(error => {\n        showNotification('Error: ' + error.message, 'error');\n    });\n}\n\n// Add this to your existing DOMContentLoaded event listener or create a new one\ndocument.addEventListener('DOMContentLoaded', function() {\n    const clearChatButton = document.getElementById('clear-chat-button');\n    if (clearChatButton) {\n        clearChatButton.addEventListener('click', clearChatSession);\n    }\n});\n\n\ndocument.addEventListener('DOMContentLoaded', updateGitInfo);\n\n\nContents of app.py:\nfrom flask import Flask, render_template, request, jsonify, session\nfrom flask_socketio import SocketIO, emit\nfrom datetime import timedelta\nimport os\nimport subprocess\nimport tempfile\nfrom openai import OpenAI\nimport markdown\nimport psutil\nimport pty\nimport select\nimport termios\nimport struct\nimport fcntl\nimport logging\nimport re\nimport json\nimport shutil\n\nimport anthropic\nfrom flask import send_from_directory\n\n\n\n\napp = Flask(__name__)\napp.secret_key = 'your_secret_key_here'  # Replace with a real secret key\n\napp.config['SESSION_TYPE'] = 'filesystem'\napp.config['SESSION_PERMANENT'] = False\n\napi_key_anthropic = os.environ.get(\"ANTHROPIC\")\nclient_anthropic = anthropic.Anthropic(\n    api_key=api_key_anthropic,\n)\n\n\n\n\nsocketio = SocketIO(app)\n# Configure OpenAI API\nclient = OpenAI(                                                                                               \n        base_url=\"https://openrouter.ai/api/v1\",                                                                   \n        api_key=os.environ.get(\"OPEN_ROUTER_KEY\"),                                                                                           \n    )  \n\n\nSESSION_DIR = os.path.join(os.path.dirname(os.path.abspath(__file__)), '.editor_session')\nos.makedirs(SESSION_DIR, exist_ok=True)\nSESSION_FILE = os.path.join(SESSION_DIR, 'session_state.json')\n\nCHAT_SESSION_DIR = os.path.join(os.path.dirname(os.path.abspath(__file__)), '.editor_session')\nCHAT_SESSION_FILE = os.path.join(CHAT_SESSION_DIR, '.chat_session.json')\n\n\ndef load_chat_session():\n    if os.path.exists(CHAT_SESSION_FILE):\n        with open(CHAT_SESSION_FILE, 'r') as f:\n            return json.load(f)\n    return {\"conversation_history\": [], \"tagged_file_contents\": {}}\n\ndef save_chat_session(chat_session):\n    with open(CHAT_SESSION_FILE, 'w') as f:\n        json.dump(chat_session, f, indent=2)\n\n\ndef load_session_state():\n    try:\n        if os.path.exists(SESSION_FILE) and os.path.getsize(SESSION_FILE) > 0:\n            with open(SESSION_FILE, 'r') as f:\n                return json.load(f)\n    except json.JSONDecodeError:\n        print(f\"Error decoding JSON from {SESSION_FILE}. Using default state.\")\n    except Exception as e:\n        print(f\"Error loading session state: {str(e)}. Using default state.\")\n    \n    return {\"selected_directory\": os.getcwd()}\n\ndef save_session_state(state):\n    try:\n        with open(SESSION_FILE, 'w') as f:\n            json.dump(state, f, indent=2)\n    except Exception as e:\n        print(f\"Error saving session state: {str(e)}\")\n\n\n\n@app.route('/')\ndef index():\n    return render_template('index.html')\n\n\n\n@app.route('/browse_directory', methods=['GET'])\ndef browse_directory():\n\n    directory = os.getcwd()\n\n\n    if directory:\n        try:\n            items = os.listdir(directory)\n            directories = [d for d in items if os.path.isdir(os.path.join(directory, d))]\n            files = [f for f in items if os.path.isfile(os.path.join(directory, f))]\n            session['current_directory'] = os.path.abspath(directory)  # Use absolute path\n            print('current_directory')\n            print(session['current_directory'])\n\n\n            session_state = load_session_state()\n            print(\"session_state\")\n            print(session_state)\n            session_state[\"selected_directory\"] = os.path.abspath(directory)\n            save_session_state(session_state)\n\n\n            return jsonify({\n                \"status\": \"success\",\n                \"current_path\": session['current_directory'],\n                \"directories\": directories,\n                \"files\": files\n            })\n        except Exception as e:\n            return jsonify({\"status\": \"error\", \"message\": str(e)})\n    else:\n        return jsonify({\"status\": \"cancelled\"})\n\n\n@app.route('/manifest.json')\ndef manifest():\n    return send_from_directory('static', 'manifest.json')\n\n@app.route('/service-worker.js')\ndef service_worker():\n    return send_from_directory('static', 'service-worker.js')\n\n\n@app.route('/file/<path:filepath>')\ndef get_file_content(filepath):\n    try:\n        session_state = load_session_state()\n        current_directory = session_state.get(\"selected_directory\", os.getcwd())\n        full_path = '/'+filepath     \n        # Ensure the requested file is within the current directory\n        if not os.path.abspath(full_path).startswith(os.path.abspath(current_directory)):\n            return jsonify({\"status\": \"error\", \"message\": \"Access denied\"})\n        \n        if os.path.isfile(full_path):\n            with open(full_path, 'r') as file:\n                content = file.read()\n            return jsonify({\"status\": \"success\", \"content\": content})\n        else:\n            return jsonify({\"status\": \"error\", \"message\": \"File not found\"})\n    except Exception as e:\n        return jsonify({\"status\": \"error\", \"message\": str(e)})\n\n\n\n\n@app.route('/select_directory', methods=['POST'])\ndef select_directory():\n    directory = request.json['directory']\n    if os.path.isdir(directory):\n        session['current_directory'] = directory\n        return jsonify({\"status\": \"success\", \"directory\": directory})\n    else:\n        return jsonify({\"status\": \"error\", \"message\": \"Invalid directory\"})\n\n@app.route('/files')\ndef get_files():\n    directory = session.get('current_directory', '')\n    if not directory:\n        return jsonify({\"status\": \"error\", \"message\": \"No directory selected\"})\n    \n    files = [f for f in os.listdir(directory) if os.path.isfile(os.path.join(directory, f))]\n    return jsonify({\"status\": \"success\", \"files\": files})\n\n\n\n\n\ndef create_directory_structure(path):\n    structure = {\"name\": os.path.basename(path), \"type\": \"directory\", \"path\": path, \"children\": []}\n\n    try:\n        with os.scandir(path) as entries:\n            for entry in entries:\n                if entry.is_dir():\n                    structure[\"children\"].append(create_directory_structure(entry.path))\n                else:\n                    structure[\"children\"].append({\n                        \"name\": entry.name,\n                        \"type\": \"file\",\n                        \"path\": entry.path\n                    })\n    except PermissionError:\n        structure[\"children\"].append({\"name\": \"Permission Denied\", \"type\": \"error\"})\n    return structure\n\n\n@app.route('/get_directory_structure')\ndef get_directory_structure():\n    try:\n        print(\"get director structure\")\n\n        session_state = load_session_state()\n        current_directory = session_state.get(\"selected_directory\", os.getcwd())\n\n        print(current_directory)\n\n        structure = create_directory_structure(current_directory)\n        return jsonify({\n            \"status\": \"success\",\n            \"current_directory\": current_directory,\n            \"structure\": structure\n        })\n    except Exception as e:\n        return jsonify({\"status\": \"error\", \"message\": str(e)})\n\n\n@app.route('/save', methods=['POST'])\ndef save_file():\n    data = request.json\n    filename = data['filename']\n    content = data['content']\n    directory = session.get('current_directory', '')\n    if not directory:\n        return jsonify({\"status\": \"error\", \"message\": \"No directory selected\"})\n    \n    file_path = os.path.join(directory, filename)\n    try:\n        with open(file_path, 'w') as file:\n            file.write(content)\n        return jsonify({\"status\": \"success\"})\n    except Exception as e:\n        return jsonify({\"status\": \"error\", \"message\": str(e)})\n\n@app.route('/run', methods=['POST'])\ndef run_code():\n    data = request.json\n    filename = data['filename']\n    user_input = data.get('input', '')\n    directory = session.get('current_directory', '')\n    if not directory:\n        return jsonify({\"status\": \"error\", \"message\": \"No directory selected\"})\n    \n    file_path = os.path.join(directory, filename)\n    \n    if filename.endswith('.cpp'):\n        with tempfile.NamedTemporaryFile(suffix='.exe', delete=False) as temp_exe:\n            executable = temp_exe.name\n        \n        compile_command = f\"g++ {file_path} -o {executable}\"\n        compile_process = subprocess.run(compile_command, shell=True, capture_output=True, text=True)\n        \n        if compile_process.returncode != 0:\n            return jsonify({\"status\": \"error\", \"output\": f\"Compilation error:\\n{compile_process.stderr}\"})\n        \n        try:\n            run_process = subprocess.run(executable, input=user_input, shell=True, capture_output=True, text=True, timeout=5)\n            output = run_process.stdout\n            error = run_process.stderr\n            \n            if run_process.returncode != 0:\n                return jsonify({\"status\": \"error\", \"output\": f\"Runtime error:\\n{error}\"})\n            \n            return jsonify({\"status\": \"success\", \"output\": output or \"Program ran successfully, but produced no output.\"})\n        except subprocess.TimeoutExpired:\n            return jsonify({\"status\": \"error\", \"output\": \"Program execution timed out after 5 seconds.\"})\n        except Exception as e:\n            return jsonify({\"status\": \"error\", \"output\": f\"An error occurred: {str(e)}\"})\n        finally:\n            os.remove(executable)\n\n    elif filename.endswith('.py'):\n    # Run Python code\n        try:\n            run_process = subprocess.run(['python', file_path], input=user_input, text=True, capture_output=True, timeout=5)\n            output = run_process.stdout\n            error = run_process.stderr\n\n            if run_process.returncode != 0:\n                return jsonify({\"status\": \"error\", \"output\": f\"Runtime error:\\n{error}\"})\n\n            return jsonify({\"status\": \"success\", \"output\": output or \"Program ran successfully, but produced no output.\"})\n        except subprocess.TimeoutExpired:\n            return jsonify({\"status\": \"error\", \"output\": \"Program execution timed out after 5 seconds.\"})\n        except Exception as e:\n            return jsonify({\"status\": \"error\", \"output\": f\"An error occurred: {str(e)}\"})\n\n\n\n@app.route('/chat', methods=['POST'])\ndef chat():\n    data = request.json\n    code = data['code']\n    user_message = data['message']\n    tagged_files = data.get('taggedFiles', [])\n    model = data.get('model', 'openai/gpt-4o-mini')  # Default to GPT-4o-mini if not specified\n    print(model)\n    \n    # Load the current chat session\n    chat_session = load_chat_session()\n    \n    # Fetch content of newly tagged files and add to existing tagged files\n    session_state = load_session_state()\n    current_directory = session_state.get(\"selected_directory\", os.getcwd())\n    for file_path in tagged_files:\n        if file_path not in chat_session['tagged_file_contents']:\n            full_path = os.path.join(current_directory, file_path)\n            if os.path.isfile(full_path):\n                with open(full_path, 'r') as file:\n                    chat_session['tagged_file_contents'][file_path] = file.read()\n            else:\n                chat_session['tagged_file_contents'][file_path] = f\"File not found: {file_path}\"\n    \n    # Prepare the prompt with all tagged file contents\n    prompt = f\"User's question: {user_message}\\n\\n\"\n    prompt += f\"Current file contents:\\n{code}\\n\\n\"\n    for file_path, content in chat_session['tagged_file_contents'].items():\n        prompt += f\"Contents of {file_path}:\\n{content}\\n\\n\"\n    \n    # Add the new prompt to the conversation history\n    chat_session['conversation_history'].append({\"role\": \"user\", \"content\": prompt})\n    print(\"Current conversation history:\")\n    print(chat_session['conversation_history'])\n    \n    # Prepare the messages for the API call\n    messages = [\n        {\"role\": \"system\", \"content\": \"You are a helpful coding assistant. The user will provide you with code and questions about it. Always give your response in markdown format. It should be always markdown, remember that.\"},\n    ] + chat_session['conversation_history']\n    \n    try:\n        if model == \"anthropic/claude-3.5-sonnet\":\n            response = client_anthropic.messages.create(\n                model=\"claude-3-sonnet-20240229\",\n                temperature=0,\n                max_tokens = 4096,\n                system=\"You are a helpful coding assistant. The user will provide you with code and questions about it. Always return your output in markdown so that i can correctly render it.\",\n                messages=chat_session['conversation_history']\n            )\n        else:\n            response = client.chat.completions.create(\n                model=model,\n                messages=messages\n            )\n\n        ai_response = \"\"\n\n        if model == \"anthropic/claude-3.5-sonnet\":\n            ai_response = response.content[0].text\n        else:\n            ai_response = response.choices[0].message.content\n        \n        # Add the AI's response to the conversation history\n        chat_session['conversation_history'].append({\"role\": \"assistant\", \"content\": ai_response})\n        \n        # Limit the conversation history to the last 10 messages (5 exchanges)\n        if len(chat_session['conversation_history']) > 10:\n            chat_session['conversation_history'] = chat_session['conversation_history'][-10:]\n        \n        # Save the updated chat session\n        save_chat_session(chat_session)\n        \n        return jsonify({\"status\": \"success\", \"response\": ai_response})\n    except Exception as e:\n        print(\"Error:\", str(e))\n        return jsonify({\"status\": \"error\", \"message\": str(e)})\n\n# Add this route to clear the chat session\n@app.route('/clear_chat_session', methods=['POST'])\ndef clear_chat_session():\n    if os.path.exists(CHAT_SESSION_FILE):\n        os.remove(CHAT_SESSION_FILE)\n    return jsonify({\"status\": \"success\", \"message\": \"Chat session cleared\"})\n\n# Call this function when your Flask app starts\ndef initialize_chat_session():\n    if not os.path.exists(CHAT_SESSION_FILE):\n        save_chat_session({\"conversation_history\": [], \"tagged_file_contents\": {}})\n\n\n\n@app.route('/ai_suggestion', methods=['POST'])\ndef ai_suggestion():\n    data = request.json\n    prompt = data['prompt']\n    selected_code = data['code']\n    \n    try:\n        # Prepare the messages for the API call\n        messages = [\n            {\"role\": \"system\", \"content\": \"You are an AI coding assistant. Provide code suggestions based on the given prompt and selected code. Only return the suggested code, without any explanations or markdown formatting.\"},\n            {\"role\": \"user\", \"content\": f\"Prompt: {prompt}\\n\\nSelected Code:\\n{selected_code}\"}\n        ]\n        \n        response = client.chat.completions.create(\n            model=\"openai/gpt-4o-mini\",  # You can change this to the desired model\n            messages=messages\n        )\n        \n        ai_suggestion = response.choices[0].message.content.strip()\n        \n        return jsonify({\"status\": \"success\", \"suggestion\": ai_suggestion})\n    except Exception as e:\n        print(\"Error:\", str(e))\n        return jsonify({\"status\": \"error\", \"message\": str(e)})\n\n\n\n\ndef get_current_directory():\n    return session.get('current_directory', os.getcwd())\n\n\n\n@app.route('/hardware_stats')\ndef hardware_stats():\n    cpu_usage = psutil.cpu_percent()\n    memory = psutil.virtual_memory()\n    disk = psutil.disk_usage('/')\n\n    stats = {\n        'cpu_usage': round(cpu_usage, 1),\n        'memory_used': round(memory.used / (1024**3), 1),\n        'memory_total': round(memory.total / (1024**3), 1),\n        'disk_used': round(disk.used / (1024**3), 1),\n        'disk_total': round(disk.total / (1024**3), 1)\n    }\n    \n    logging.info(f\"Hardware stats: {stats}\")\n    return jsonify(stats)\n\n\n\n@socketio.on('connect', namespace='/terminal')\ndef terminal_connect():\n    print('Client connected to terminal')\n\n@socketio.on('disconnect', namespace='/terminal')\ndef terminal_disconnect():\n    print('Client disconnected from terminal')\n\n@socketio.on('command', namespace='/terminal')\ndef handle_command(command):\n    print(f'Received command: {command}')\n    try:\n        # Execute the command\n        result = subprocess.run(command, shell=True, capture_output=True, text=True, timeout=10)\n        output = result.stdout + result.stderr\n        if not output:\n            output = f\"Command executed: {command}\\n\"\n    except subprocess.TimeoutExpired:\n        output = \"Command execution timed out\\n\"\n    except Exception as e:\n        output = f\"Error executing command: {str(e)}\\n\"\n    \n    emit('output', output)\n\n\n\n\nimport html\n\n@app.route('/git_diff', methods=['POST'])\ndef git_diff():\n    try:\n        directory = session.get('current_directory', '')\n        if not directory:\n            return jsonify({\"status\": \"error\", \"message\": \"No directory selected\"})\n        \n        commit_hash = request.json.get('commit_hash', 'HEAD')\n        \n        result = subprocess.run(['git', 'diff', commit_hash],\n                                cwd=directory,\n                                capture_output=True,\n                                text=True,\n                                check=True)\n        \n        diff_lines = result.stdout.split('\\n')\n        processed_diff = []\n        current_file = \"\"\n        line_number_old = 0\n        line_number_new = 0\n        \n        for line in diff_lines:\n            # Escape HTML characters to prevent rendering\n            escaped_line = html.escape(line)\n            \n            if line.startswith('diff --git'):\n                if current_file:\n                    processed_diff.append('</table></div>')\n                current_file = line.split()[-1].split('/')[-1]\n                processed_diff.append(f'<div class=\"diff-file\"><h3>{html.escape(current_file)}</h3><table>')\n                line_number_old = 0\n                line_number_new = 0\n            elif line.startswith('+++') or line.startswith('---'):\n                processed_diff.append(f'<tr><td colspan=\"3\" class=\"diff-header\">{escaped_line}</td></tr>')\n            elif line.startswith('@@'):\n                match = re.match(r'@@ -(\\d+),\\d+ \\+(\\d+),\\d+ @@', line)\n                if match:\n                    line_number_old = int(match.group(1))\n                    line_number_new = int(match.group(2))\n                processed_diff.append(f'<tr><td colspan=\"3\" class=\"diff-header\">{escaped_line}</td></tr>')\n            else:\n                if line.startswith('+'):\n                    processed_diff.append(f'<tr class=\"diff-added\"><td></td><td>{line_number_new}</td><td>{escaped_line}</td></tr>')\n                    line_number_new += 1\n                elif line.startswith('-'):\n                    processed_diff.append(f'<tr class=\"diff-removed\"><td>{line_number_old}</td><td></td><td>{escaped_line}</td></tr>')\n                    line_number_old += 1\n                else:\n                    processed_diff.append(f'<tr><td>{line_number_old}</td><td>{line_number_new}</td><td>{escaped_line}</td></tr>')\n                    line_number_old += 1\n                    line_number_new += 1\n        \n        if current_file:\n            processed_diff.append('</table></div>')\n        \n        html_diff = '\\n'.join(processed_diff)\n        \n        return jsonify({\"status\": \"success\", \"diff\": html_diff})\n    except subprocess.CalledProcessError as e:\n        return jsonify({\"status\": \"error\", \"message\": f\"Git diff failed: {e.stderr}\"})\n    except Exception as e:\n        return jsonify({\"status\": \"error\", \"message\": str(e)})\n\n\n\n\n\n@app.route('/git_info')\ndef get_git_info():\n    try:\n        directory = session.get('current_directory', '')\n        if not directory:\n            return jsonify({\"status\": \"error\", \"message\": \"No directory selected\"})\n\n        # Get current branch\n        branch = subprocess.check_output(['git', 'rev-parse', '--abbrev-ref', 'HEAD'], \n                                         cwd=directory, text=True).strip()\n\n        # Get commit hash\n        commit_hash = subprocess.check_output(['git', 'rev-parse', '--short', 'HEAD'], \n                                              cwd=directory, text=True).strip()\n\n        # Get number of modified files\n        status_output = subprocess.check_output(['git', 'status', '--porcelain'], \n                                                cwd=directory, text=True)\n        modified_files = len(status_output.splitlines())\n\n        # Get number of unpushed commits\n        unpushed = subprocess.check_output(['git', 'log', '@{u}..'], \n                                           cwd=directory, text=True)\n        unpushed_commits = len(unpushed.splitlines()) // 6  # Divide by 6 as each commit has 6 lines in the log\n\n        return jsonify({\n            \"status\": \"success\",\n            \"branch\": branch,\n            \"commit\": commit_hash,\n            \"modified_files\": modified_files,\n            \"unpushed_commits\": unpushed_commits\n        })\n    except subprocess.CalledProcessError as e:\n        return jsonify({\"status\": \"error\", \"message\": f\"Git command failed: {str(e)}\"})\n    except Exception as e:\n        return jsonify({\"status\": \"error\", \"message\": str(e)})\n\n\n\n@app.route('/get_commits', methods=['GET'])\ndef get_commits():\n    try:\n        directory = session.get('current_directory', '')\n        if not directory:\n            return jsonify({\"status\": \"error\", \"message\": \"No directory selected\"})\n        \n        result = subprocess.run(['git', 'log', '--pretty=format:%H|%s', '-n', '50'],\n                                cwd=directory,\n                                capture_output=True,\n                                text=True,\n                                check=True)\n        \n        commits = [{'hash': line.split('|')[0], 'message': line.split('|')[1]} \n                   for line in result.stdout.split('\\n') if line]\n        \n        return jsonify({\"status\": \"success\", \"commits\": commits})\n    except subprocess.CalledProcessError as e:\n        return jsonify({\"status\": \"error\", \"message\": f\"Failed to get commits: {e.stderr}\"})\n    except Exception as e:\n        return jsonify({\"status\": \"error\", \"message\": str(e)})\n\n\n\n\n\n\n\n@app.route('/add_file', methods=['POST'])\ndef add_file():\n    data = request.json\n    file_path = data.get('file_path')\n    \n    if not file_path:\n        return jsonify({\"status\": \"error\", \"message\": \"File path is required\"})\n    \n    try:\n        session_state = load_session_state()\n        current_directory = session_state.get(\"selected_directory\", os.getcwd())\n        full_path = os.path.join(current_directory, file_path)\n        \n        # Create any necessary directories\n        os.makedirs(os.path.dirname(full_path), exist_ok=True)\n        \n        # Create the file\n        with open(full_path, 'w') as f:\n            pass  # Create an empty file\n        \n        return jsonify({\"status\": \"success\", \"message\": f\"File created: {file_path}\"})\n    except Exception as e:\n        return jsonify({\"status\": \"error\", \"message\": str(e)})\n\n@app.route('/rename_file', methods=['POST'])\ndef rename_file():\n    data = request.json\n    old_path = data.get('old_path')\n    new_path = data.get('new_path')\n    \n    if not old_path or not new_path:\n        return jsonify({\"status\": \"error\", \"message\": \"Both old and new file paths are required\"})\n    \n    try:\n        session_state = load_session_state()\n        current_directory = session_state.get(\"selected_directory\", os.getcwd())\n        full_old_path = os.path.join(current_directory, old_path)\n        full_new_path = os.path.join(current_directory, new_path)\n        \n        if os.path.isfile(full_old_path):\n            os.rename(full_old_path, full_new_path)\n            return jsonify({\"status\": \"success\", \"message\": f\"File renamed from {old_path} to {new_path}\"})\n        else:\n            return jsonify({\"status\": \"error\", \"message\": f\"File not found: {old_path}\"})\n    except Exception as e:\n        return jsonify({\"status\": \"error\", \"message\": str(e)})\n\n@app.route('/delete_file', methods=['POST'])\ndef delete_file():\n    data = request.json\n    file_path = data.get('file_path')\n    \n    if not file_path:\n        return jsonify({\"status\": \"error\", \"message\": \"File path is required\"})\n    \n    try:\n        session_state = load_session_state()\n        current_directory = session_state.get(\"selected_directory\", os.getcwd())\n        full_path = os.path.join(current_directory, file_path)\n        \n        if os.path.isfile(full_path):\n            os.remove(full_path)\n            return jsonify({\"status\": \"success\", \"message\": f\"File deleted: {file_path}\"})\n        else:\n            return jsonify({\"status\": \"error\", \"message\": f\"File not found: {file_path}\"})\n    except Exception as e:\n        return jsonify({\"status\": \"error\", \"message\": str(e)})\n\n\n\n\n\n\n\n@app.route('/add_folder', methods=['POST'])\ndef add_folder():\n    data = request.json\n    folder_path = data.get('folder_path')\n    \n    if not folder_path:\n        return jsonify({\"status\": \"error\", \"message\": \"Folder path is required\"})\n    \n    try:\n        session_state = load_session_state()\n        current_directory = session_state.get(\"selected_directory\", os.getcwd())\n        full_path = os.path.join(current_directory, folder_path)\n        \n        os.makedirs(full_path, exist_ok=True)\n        \n        return jsonify({\"status\": \"success\", \"message\": f\"Folder created: {folder_path}\"})\n    except Exception as e:\n        return jsonify({\"status\": \"error\", \"message\": str(e)})\n\n@app.route('/delete_folder', methods=['POST'])\ndef delete_folder():\n    data = request.json\n    folder_path = data.get('folder_path')\n    \n    if not folder_path:\n        return jsonify({\"status\": \"error\", \"message\": \"Folder path is required\"})\n    \n    try:\n        session_state = load_session_state()\n        current_directory = session_state.get(\"selected_directory\", os.getcwd())\n        full_path = os.path.join(current_directory, folder_path)\n        \n        if os.path.isdir(full_path):\n            shutil.rmtree(full_path)\n            return jsonify({\"status\": \"success\", \"message\": f\"Folder deleted: {folder_path}\"})\n        else:\n            return jsonify({\"status\": \"error\", \"message\": f\"Folder not found: {folder_path}\"})\n    except Exception as e:\n        return jsonify({\"status\": \"error\", \"message\": str(e)})\n\n@app.route('/rename_folder', methods=['POST'])\ndef rename_folder():\n    data = request.json\n    old_path = data.get('old_path')\n    new_path = data.get('new_path')\n    \n    if not old_path or not new_path:\n        return jsonify({\"status\": \"error\", \"message\": \"Both old and new folder paths are required\"})\n    \n    try:\n        session_state = load_session_state()\n        current_directory = session_state.get(\"selected_directory\", os.getcwd())\n        full_old_path = os.path.join(current_directory, old_path)\n        full_new_path = os.path.join(current_directory, new_path)\n        \n        if os.path.isdir(full_old_path):\n            os.rename(full_old_path, full_new_path)\n            return jsonify({\"status\": \"success\", \"message\": f\"Folder renamed from {old_path} to {new_path}\"})\n        else:\n            return jsonify({\"status\": \"error\", \"message\": f\"Folder not found: {old_path}\"})\n    except Exception as e:\n        return jsonify({\"status\": \"error\", \"message\": str(e)})\n\n\n\n\n\ninitialize_chat_session()\n\nif __name__ == '__main__':\n    socketio.run(app, debug = True, port = 5000)\n\n"
    },
    {
      "role": "assistant",
      "content": "```python\napp.py\n```\n\nThis code defines a Flask web application named `app` that serves as a code editor with integrated features like:\n\n*   **File browsing and editing:** Users can browse directories, open/edit files (cpp, py, etc.), save changes, and run code.\n*   **Interactive shell:** A terminal emulator powered by SocketIO allows users to execute shell commands.\n*   **Code execution (Python/C++):** Users can run their Python and C++ code within the application.\n*   **Chat with AI assistant:** Users can have conversations with an AI assistant (OpenAI or Anthropic) to get help with coding. The chat session can be cleared.\n*   **Git integration:** It displays basic Git information (branch, commit, unpushed changes) and allows viewing commit history up to 50 most recent commits and Git diff.\n*   **Hardware stats:** Displays CPU, memory, and disk usage statistics.\n*   **Command Palette:** Users can access features like creating and renaming files and folders using a Ctrl+P command palette, as well as getting AI suggestions for highlighted code snippets.\n*   **Resizable layout:** The application provides a resizable interface for the editor, file tree, IO containers, chat, and terminal sections.\n*   **PWA features:** Includes `manifest.json` and `service-worker.js` as a Progressive Web App (PWA).\n\nThe application uses Flask, Flask-SocketIO, OpenAI API, Anthropic API, subprocess, psutil, and other libraries to manage the above functionalities. Session data is stored in files. The AI models can be changed between GPT-4o-mini and anthropic/claude-3.5-sonnet."
    },
    {
      "role": "user",
      "content": "User's question: try again\n\nCurrent file contents:\n// Select a file to edit\n\nContents of app.py:\nfrom flask import Flask, render_template, request, jsonify, session\nfrom flask_socketio import SocketIO, emit\nfrom datetime import timedelta\nimport os\nimport subprocess\nimport tempfile\nfrom openai import OpenAI\nimport markdown\nimport psutil\nimport pty\nimport select\nimport termios\nimport struct\nimport fcntl\nimport logging\nimport re\nimport json\nimport shutil\n\nimport anthropic\nfrom flask import send_from_directory\n\n\n\n\napp = Flask(__name__)\napp.secret_key = 'your_secret_key_here'  # Replace with a real secret key\n\napp.config['SESSION_TYPE'] = 'filesystem'\napp.config['SESSION_PERMANENT'] = False\n\napi_key_anthropic = os.environ.get(\"ANTHROPIC\")\nclient_anthropic = anthropic.Anthropic(\n    api_key=api_key_anthropic,\n)\n\n\n\n\nsocketio = SocketIO(app)\n# Configure OpenAI API\nclient = OpenAI(                                                                                               \n        base_url=\"https://openrouter.ai/api/v1\",                                                                   \n        api_key=os.environ.get(\"OPEN_ROUTER_KEY\"),                                                                                           \n    )  \n\n\nSESSION_DIR = os.path.join(os.path.dirname(os.path.abspath(__file__)), '.editor_session')\nos.makedirs(SESSION_DIR, exist_ok=True)\nSESSION_FILE = os.path.join(SESSION_DIR, 'session_state.json')\n\nCHAT_SESSION_DIR = os.path.join(os.path.dirname(os.path.abspath(__file__)), '.editor_session')\nCHAT_SESSION_FILE = os.path.join(CHAT_SESSION_DIR, '.chat_session.json')\n\n\ndef load_chat_session():\n    if os.path.exists(CHAT_SESSION_FILE):\n        with open(CHAT_SESSION_FILE, 'r') as f:\n            return json.load(f)\n    return {\"conversation_history\": [], \"tagged_file_contents\": {}}\n\ndef save_chat_session(chat_session):\n    with open(CHAT_SESSION_FILE, 'w') as f:\n        json.dump(chat_session, f, indent=2)\n\n\ndef load_session_state():\n    try:\n        if os.path.exists(SESSION_FILE) and os.path.getsize(SESSION_FILE) > 0:\n            with open(SESSION_FILE, 'r') as f:\n                return json.load(f)\n    except json.JSONDecodeError:\n        print(f\"Error decoding JSON from {SESSION_FILE}. Using default state.\")\n    except Exception as e:\n        print(f\"Error loading session state: {str(e)}. Using default state.\")\n    \n    return {\"selected_directory\": os.getcwd()}\n\ndef save_session_state(state):\n    try:\n        with open(SESSION_FILE, 'w') as f:\n            json.dump(state, f, indent=2)\n    except Exception as e:\n        print(f\"Error saving session state: {str(e)}\")\n\n\n\n@app.route('/')\ndef index():\n    return render_template('index.html')\n\n\n\n@app.route('/browse_directory', methods=['GET'])\ndef browse_directory():\n\n    directory = os.getcwd()\n\n\n    if directory:\n        try:\n            items = os.listdir(directory)\n            directories = [d for d in items if os.path.isdir(os.path.join(directory, d))]\n            files = [f for f in items if os.path.isfile(os.path.join(directory, f))]\n            session['current_directory'] = os.path.abspath(directory)  # Use absolute path\n            print('current_directory')\n            print(session['current_directory'])\n\n\n            session_state = load_session_state()\n            print(\"session_state\")\n            print(session_state)\n            session_state[\"selected_directory\"] = os.path.abspath(directory)\n            save_session_state(session_state)\n\n\n            return jsonify({\n                \"status\": \"success\",\n                \"current_path\": session['current_directory'],\n                \"directories\": directories,\n                \"files\": files\n            })\n        except Exception as e:\n            return jsonify({\"status\": \"error\", \"message\": str(e)})\n    else:\n        return jsonify({\"status\": \"cancelled\"})\n\n\n@app.route('/manifest.json')\ndef manifest():\n    return send_from_directory('static', 'manifest.json')\n\n@app.route('/service-worker.js')\ndef service_worker():\n    return send_from_directory('static', 'service-worker.js')\n\n\n@app.route('/file/<path:filepath>')\ndef get_file_content(filepath):\n    try:\n        session_state = load_session_state()\n        current_directory = session_state.get(\"selected_directory\", os.getcwd())\n        full_path = '/'+filepath     \n        # Ensure the requested file is within the current directory\n        if not os.path.abspath(full_path).startswith(os.path.abspath(current_directory)):\n            return jsonify({\"status\": \"error\", \"message\": \"Access denied\"})\n        \n        if os.path.isfile(full_path):\n            with open(full_path, 'r') as file:\n                content = file.read()\n            return jsonify({\"status\": \"success\", \"content\": content})\n        else:\n            return jsonify({\"status\": \"error\", \"message\": \"File not found\"})\n    except Exception as e:\n        return jsonify({\"status\": \"error\", \"message\": str(e)})\n\n\n\n\n@app.route('/select_directory', methods=['POST'])\ndef select_directory():\n    directory = request.json['directory']\n    if os.path.isdir(directory):\n        session['current_directory'] = directory\n        return jsonify({\"status\": \"success\", \"directory\": directory})\n    else:\n        return jsonify({\"status\": \"error\", \"message\": \"Invalid directory\"})\n\n@app.route('/files')\ndef get_files():\n    directory = session.get('current_directory', '')\n    if not directory:\n        return jsonify({\"status\": \"error\", \"message\": \"No directory selected\"})\n    \n    files = [f for f in os.listdir(directory) if os.path.isfile(os.path.join(directory, f))]\n    return jsonify({\"status\": \"success\", \"files\": files})\n\n\n\n\n\ndef create_directory_structure(path):\n    structure = {\"name\": os.path.basename(path), \"type\": \"directory\", \"path\": path, \"children\": []}\n\n    try:\n        with os.scandir(path) as entries:\n            for entry in entries:\n                if entry.is_dir():\n                    structure[\"children\"].append(create_directory_structure(entry.path))\n                else:\n                    structure[\"children\"].append({\n                        \"name\": entry.name,\n                        \"type\": \"file\",\n                        \"path\": entry.path\n                    })\n    except PermissionError:\n        structure[\"children\"].append({\"name\": \"Permission Denied\", \"type\": \"error\"})\n    return structure\n\n\n@app.route('/get_directory_structure')\ndef get_directory_structure():\n    try:\n        print(\"get director structure\")\n\n        session_state = load_session_state()\n        current_directory = session_state.get(\"selected_directory\", os.getcwd())\n\n        print(current_directory)\n\n        structure = create_directory_structure(current_directory)\n        return jsonify({\n            \"status\": \"success\",\n            \"current_directory\": current_directory,\n            \"structure\": structure\n        })\n    except Exception as e:\n        return jsonify({\"status\": \"error\", \"message\": str(e)})\n\n\n@app.route('/save', methods=['POST'])\ndef save_file():\n    data = request.json\n    filename = data['filename']\n    content = data['content']\n    directory = session.get('current_directory', '')\n    if not directory:\n        return jsonify({\"status\": \"error\", \"message\": \"No directory selected\"})\n    \n    file_path = os.path.join(directory, filename)\n    try:\n        with open(file_path, 'w') as file:\n            file.write(content)\n        return jsonify({\"status\": \"success\"})\n    except Exception as e:\n        return jsonify({\"status\": \"error\", \"message\": str(e)})\n\n@app.route('/run', methods=['POST'])\ndef run_code():\n    data = request.json\n    filename = data['filename']\n    user_input = data.get('input', '')\n    directory = session.get('current_directory', '')\n    if not directory:\n        return jsonify({\"status\": \"error\", \"message\": \"No directory selected\"})\n    \n    file_path = os.path.join(directory, filename)\n    \n    if filename.endswith('.cpp'):\n        with tempfile.NamedTemporaryFile(suffix='.exe', delete=False) as temp_exe:\n            executable = temp_exe.name\n        \n        compile_command = f\"g++ {file_path} -o {executable}\"\n        compile_process = subprocess.run(compile_command, shell=True, capture_output=True, text=True)\n        \n        if compile_process.returncode != 0:\n            return jsonify({\"status\": \"error\", \"output\": f\"Compilation error:\\n{compile_process.stderr}\"})\n        \n        try:\n            run_process = subprocess.run(executable, input=user_input, shell=True, capture_output=True, text=True, timeout=5)\n            output = run_process.stdout\n            error = run_process.stderr\n            \n            if run_process.returncode != 0:\n                return jsonify({\"status\": \"error\", \"output\": f\"Runtime error:\\n{error}\"})\n            \n            return jsonify({\"status\": \"success\", \"output\": output or \"Program ran successfully, but produced no output.\"})\n        except subprocess.TimeoutExpired:\n            return jsonify({\"status\": \"error\", \"output\": \"Program execution timed out after 5 seconds.\"})\n        except Exception as e:\n            return jsonify({\"status\": \"error\", \"output\": f\"An error occurred: {str(e)}\"})\n        finally:\n            os.remove(executable)\n\n    elif filename.endswith('.py'):\n    # Run Python code\n        try:\n            run_process = subprocess.run(['python', file_path], input=user_input, text=True, capture_output=True, timeout=5)\n            output = run_process.stdout\n            error = run_process.stderr\n\n            if run_process.returncode != 0:\n                return jsonify({\"status\": \"error\", \"output\": f\"Runtime error:\\n{error}\"})\n\n            return jsonify({\"status\": \"success\", \"output\": output or \"Program ran successfully, but produced no output.\"})\n        except subprocess.TimeoutExpired:\n            return jsonify({\"status\": \"error\", \"output\": \"Program execution timed out after 5 seconds.\"})\n        except Exception as e:\n            return jsonify({\"status\": \"error\", \"output\": f\"An error occurred: {str(e)}\"})\n\n\n\n@app.route('/chat', methods=['POST'])\ndef chat():\n    data = request.json\n    code = data['code']\n    user_message = data['message']\n    tagged_files = data.get('taggedFiles', [])\n    model = data.get('model', 'openai/gpt-4o-mini')  # Default to GPT-4o-mini if not specified\n    print(model)\n    \n    # Load the current chat session\n    chat_session = load_chat_session()\n    \n    # Fetch content of newly tagged files and add to existing tagged files\n    session_state = load_session_state()\n    current_directory = session_state.get(\"selected_directory\", os.getcwd())\n    for file_path in tagged_files:\n        if file_path not in chat_session['tagged_file_contents']:\n            full_path = os.path.join(current_directory, file_path)\n            if os.path.isfile(full_path):\n                with open(full_path, 'r') as file:\n                    chat_session['tagged_file_contents'][file_path] = file.read()\n            else:\n                chat_session['tagged_file_contents'][file_path] = f\"File not found: {file_path}\"\n    \n    # Prepare the prompt with all tagged file contents\n    prompt = f\"User's question: {user_message}\\n\\n\"\n    prompt += f\"Current file contents:\\n{code}\\n\\n\"\n    for file_path, content in chat_session['tagged_file_contents'].items():\n        prompt += f\"Contents of {file_path}:\\n{content}\\n\\n\"\n    \n    # Add the new prompt to the conversation history\n    chat_session['conversation_history'].append({\"role\": \"user\", \"content\": prompt})\n    print(\"Current conversation history:\")\n    print(chat_session['conversation_history'])\n    \n    # Prepare the messages for the API call\n    messages = [\n        {\"role\": \"system\", \"content\": \"You are a helpful coding assistant. The user will provide you with code and questions about it. Always give your response in markdown format. It should be always markdown, remember that.\"},\n    ] + chat_session['conversation_history']\n    \n    try:\n        if model == \"anthropic/claude-3.5-sonnet\":\n            response = client_anthropic.messages.create(\n                model=\"claude-3-sonnet-20240229\",\n                temperature=0,\n                max_tokens = 4096,\n                system=\"You are a helpful coding assistant. The user will provide you with code and questions about it. Always return your output in markdown so that i can correctly render it.\",\n                messages=chat_session['conversation_history']\n            )\n        else:\n            response = client.chat.completions.create(\n                model=model,\n                messages=messages\n            )\n\n        ai_response = \"\"\n\n        if model == \"anthropic/claude-3.5-sonnet\":\n            ai_response = response.content[0].text\n        else:\n            ai_response = response.choices[0].message.content\n        \n        # Add the AI's response to the conversation history\n        chat_session['conversation_history'].append({\"role\": \"assistant\", \"content\": ai_response})\n        \n        # Limit the conversation history to the last 10 messages (5 exchanges)\n        if len(chat_session['conversation_history']) > 10:\n            chat_session['conversation_history'] = chat_session['conversation_history'][-10:]\n        \n        # Save the updated chat session\n        save_chat_session(chat_session)\n        \n        return jsonify({\"status\": \"success\", \"response\": ai_response})\n    except Exception as e:\n        print(\"Error:\", str(e))\n        return jsonify({\"status\": \"error\", \"message\": str(e)})\n\n# Add this route to clear the chat session\n@app.route('/clear_chat_session', methods=['POST'])\ndef clear_chat_session():\n    if os.path.exists(CHAT_SESSION_FILE):\n        os.remove(CHAT_SESSION_FILE)\n    return jsonify({\"status\": \"success\", \"message\": \"Chat session cleared\"})\n\n# Call this function when your Flask app starts\ndef initialize_chat_session():\n    if not os.path.exists(CHAT_SESSION_FILE):\n        save_chat_session({\"conversation_history\": [], \"tagged_file_contents\": {}})\n\n\n\n@app.route('/ai_suggestion', methods=['POST'])\ndef ai_suggestion():\n    data = request.json\n    prompt = data['prompt']\n    selected_code = data['code']\n    \n    try:\n        # Prepare the messages for the API call\n        messages = [\n            {\"role\": \"system\", \"content\": \"You are an AI coding assistant. Provide code suggestions based on the given prompt and selected code. Only return the suggested code, without any explanations or markdown formatting.\"},\n            {\"role\": \"user\", \"content\": f\"Prompt: {prompt}\\n\\nSelected Code:\\n{selected_code}\"}\n        ]\n        \n        response = client.chat.completions.create(\n            model=\"openai/gpt-4o-mini\",  # You can change this to the desired model\n            messages=messages\n        )\n        \n        ai_suggestion = response.choices[0].message.content.strip()\n        \n        return jsonify({\"status\": \"success\", \"suggestion\": ai_suggestion})\n    except Exception as e:\n        print(\"Error:\", str(e))\n        return jsonify({\"status\": \"error\", \"message\": str(e)})\n\n\n\n\ndef get_current_directory():\n    return session.get('current_directory', os.getcwd())\n\n\n\n@app.route('/hardware_stats')\ndef hardware_stats():\n    cpu_usage = psutil.cpu_percent()\n    memory = psutil.virtual_memory()\n    disk = psutil.disk_usage('/')\n\n    stats = {\n        'cpu_usage': round(cpu_usage, 1),\n        'memory_used': round(memory.used / (1024**3), 1),\n        'memory_total': round(memory.total / (1024**3), 1),\n        'disk_used': round(disk.used / (1024**3), 1),\n        'disk_total': round(disk.total / (1024**3), 1)\n    }\n    \n    logging.info(f\"Hardware stats: {stats}\")\n    return jsonify(stats)\n\n\n\n@socketio.on('connect', namespace='/terminal')\ndef terminal_connect():\n    print('Client connected to terminal')\n\n@socketio.on('disconnect', namespace='/terminal')\ndef terminal_disconnect():\n    print('Client disconnected from terminal')\n\n@socketio.on('command', namespace='/terminal')\ndef handle_command(command):\n    print(f'Received command: {command}')\n    try:\n        # Execute the command\n        result = subprocess.run(command, shell=True, capture_output=True, text=True, timeout=10)\n        output = result.stdout + result.stderr\n        if not output:\n            output = f\"Command executed: {command}\\n\"\n    except subprocess.TimeoutExpired:\n        output = \"Command execution timed out\\n\"\n    except Exception as e:\n        output = f\"Error executing command: {str(e)}\\n\"\n    \n    emit('output', output)\n\n\n\n\nimport html\n\n@app.route('/git_diff', methods=['POST'])\ndef git_diff():\n    try:\n        directory = session.get('current_directory', '')\n        if not directory:\n            return jsonify({\"status\": \"error\", \"message\": \"No directory selected\"})\n        \n        commit_hash = request.json.get('commit_hash', 'HEAD')\n        \n        result = subprocess.run(['git', 'diff', commit_hash],\n                                cwd=directory,\n                                capture_output=True,\n                                text=True,\n                                check=True)\n        \n        diff_lines = result.stdout.split('\\n')\n        processed_diff = []\n        current_file = \"\"\n        line_number_old = 0\n        line_number_new = 0\n        \n        for line in diff_lines:\n            # Escape HTML characters to prevent rendering\n            escaped_line = html.escape(line)\n            \n            if line.startswith('diff --git'):\n                if current_file:\n                    processed_diff.append('</table></div>')\n                current_file = line.split()[-1].split('/')[-1]\n                processed_diff.append(f'<div class=\"diff-file\"><h3>{html.escape(current_file)}</h3><table>')\n                line_number_old = 0\n                line_number_new = 0\n            elif line.startswith('+++') or line.startswith('---'):\n                processed_diff.append(f'<tr><td colspan=\"3\" class=\"diff-header\">{escaped_line}</td></tr>')\n            elif line.startswith('@@'):\n                match = re.match(r'@@ -(\\d+),\\d+ \\+(\\d+),\\d+ @@', line)\n                if match:\n                    line_number_old = int(match.group(1))\n                    line_number_new = int(match.group(2))\n                processed_diff.append(f'<tr><td colspan=\"3\" class=\"diff-header\">{escaped_line}</td></tr>')\n            else:\n                if line.startswith('+'):\n                    processed_diff.append(f'<tr class=\"diff-added\"><td></td><td>{line_number_new}</td><td>{escaped_line}</td></tr>')\n                    line_number_new += 1\n                elif line.startswith('-'):\n                    processed_diff.append(f'<tr class=\"diff-removed\"><td>{line_number_old}</td><td></td><td>{escaped_line}</td></tr>')\n                    line_number_old += 1\n                else:\n                    processed_diff.append(f'<tr><td>{line_number_old}</td><td>{line_number_new}</td><td>{escaped_line}</td></tr>')\n                    line_number_old += 1\n                    line_number_new += 1\n        \n        if current_file:\n            processed_diff.append('</table></div>')\n        \n        html_diff = '\\n'.join(processed_diff)\n        \n        return jsonify({\"status\": \"success\", \"diff\": html_diff})\n    except subprocess.CalledProcessError as e:\n        return jsonify({\"status\": \"error\", \"message\": f\"Git diff failed: {e.stderr}\"})\n    except Exception as e:\n        return jsonify({\"status\": \"error\", \"message\": str(e)})\n\n\n\n\n\n@app.route('/git_info')\ndef get_git_info():\n    try:\n        directory = session.get('current_directory', '')\n        if not directory:\n            return jsonify({\"status\": \"error\", \"message\": \"No directory selected\"})\n\n        # Get current branch\n        branch = subprocess.check_output(['git', 'rev-parse', '--abbrev-ref', 'HEAD'], \n                                         cwd=directory, text=True).strip()\n\n        # Get commit hash\n        commit_hash = subprocess.check_output(['git', 'rev-parse', '--short', 'HEAD'], \n                                              cwd=directory, text=True).strip()\n\n        # Get number of modified files\n        status_output = subprocess.check_output(['git', 'status', '--porcelain'], \n                                                cwd=directory, text=True)\n        modified_files = len(status_output.splitlines())\n\n        # Get number of unpushed commits\n        unpushed = subprocess.check_output(['git', 'log', '@{u}..'], \n                                           cwd=directory, text=True)\n        unpushed_commits = len(unpushed.splitlines()) // 6  # Divide by 6 as each commit has 6 lines in the log\n\n        return jsonify({\n            \"status\": \"success\",\n            \"branch\": branch,\n            \"commit\": commit_hash,\n            \"modified_files\": modified_files,\n            \"unpushed_commits\": unpushed_commits\n        })\n    except subprocess.CalledProcessError as e:\n        return jsonify({\"status\": \"error\", \"message\": f\"Git command failed: {str(e)}\"})\n    except Exception as e:\n        return jsonify({\"status\": \"error\", \"message\": str(e)})\n\n\n\n@app.route('/get_commits', methods=['GET'])\ndef get_commits():\n    try:\n        directory = session.get('current_directory', '')\n        if not directory:\n            return jsonify({\"status\": \"error\", \"message\": \"No directory selected\"})\n        \n        result = subprocess.run(['git', 'log', '--pretty=format:%H|%s', '-n', '50'],\n                                cwd=directory,\n                                capture_output=True,\n                                text=True,\n                                check=True)\n        \n        commits = [{'hash': line.split('|')[0], 'message': line.split('|')[1]} \n                   for line in result.stdout.split('\\n') if line]\n        \n        return jsonify({\"status\": \"success\", \"commits\": commits})\n    except subprocess.CalledProcessError as e:\n        return jsonify({\"status\": \"error\", \"message\": f\"Failed to get commits: {e.stderr}\"})\n    except Exception as e:\n        return jsonify({\"status\": \"error\", \"message\": str(e)})\n\n\n\n\n\n\n\n@app.route('/add_file', methods=['POST'])\ndef add_file():\n    data = request.json\n    file_path = data.get('file_path')\n    \n    if not file_path:\n        return jsonify({\"status\": \"error\", \"message\": \"File path is required\"})\n    \n    try:\n        session_state = load_session_state()\n        current_directory = session_state.get(\"selected_directory\", os.getcwd())\n        full_path = os.path.join(current_directory, file_path)\n        \n        # Create any necessary directories\n        os.makedirs(os.path.dirname(full_path), exist_ok=True)\n        \n        # Create the file\n        with open(full_path, 'w') as f:\n            pass  # Create an empty file\n        \n        return jsonify({\"status\": \"success\", \"message\": f\"File created: {file_path}\"})\n    except Exception as e:\n        return jsonify({\"status\": \"error\", \"message\": str(e)})\n\n@app.route('/rename_file', methods=['POST'])\ndef rename_file():\n    data = request.json\n    old_path = data.get('old_path')\n    new_path = data.get('new_path')\n    \n    if not old_path or not new_path:\n        return jsonify({\"status\": \"error\", \"message\": \"Both old and new file paths are required\"})\n    \n    try:\n        session_state = load_session_state()\n        current_directory = session_state.get(\"selected_directory\", os.getcwd())\n        full_old_path = os.path.join(current_directory, old_path)\n        full_new_path = os.path.join(current_directory, new_path)\n        \n        if os.path.isfile(full_old_path):\n            os.rename(full_old_path, full_new_path)\n            return jsonify({\"status\": \"success\", \"message\": f\"File renamed from {old_path} to {new_path}\"})\n        else:\n            return jsonify({\"status\": \"error\", \"message\": f\"File not found: {old_path}\"})\n    except Exception as e:\n        return jsonify({\"status\": \"error\", \"message\": str(e)})\n\n@app.route('/delete_file', methods=['POST'])\ndef delete_file():\n    data = request.json\n    file_path = data.get('file_path')\n    \n    if not file_path:\n        return jsonify({\"status\": \"error\", \"message\": \"File path is required\"})\n    \n    try:\n        session_state = load_session_state()\n        current_directory = session_state.get(\"selected_directory\", os.getcwd())\n        full_path = os.path.join(current_directory, file_path)\n        \n        if os.path.isfile(full_path):\n            os.remove(full_path)\n            return jsonify({\"status\": \"success\", \"message\": f\"File deleted: {file_path}\"})\n        else:\n            return jsonify({\"status\": \"error\", \"message\": f\"File not found: {file_path}\"})\n    except Exception as e:\n        return jsonify({\"status\": \"error\", \"message\": str(e)})\n\n\n\n\n\n\n\n@app.route('/add_folder', methods=['POST'])\ndef add_folder():\n    data = request.json\n    folder_path = data.get('folder_path')\n    \n    if not folder_path:\n        return jsonify({\"status\": \"error\", \"message\": \"Folder path is required\"})\n    \n    try:\n        session_state = load_session_state()\n        current_directory = session_state.get(\"selected_directory\", os.getcwd())\n        full_path = os.path.join(current_directory, folder_path)\n        \n        os.makedirs(full_path, exist_ok=True)\n        \n        return jsonify({\"status\": \"success\", \"message\": f\"Folder created: {folder_path}\"})\n    except Exception as e:\n        return jsonify({\"status\": \"error\", \"message\": str(e)})\n\n@app.route('/delete_folder', methods=['POST'])\ndef delete_folder():\n    data = request.json\n    folder_path = data.get('folder_path')\n    \n    if not folder_path:\n        return jsonify({\"status\": \"error\", \"message\": \"Folder path is required\"})\n    \n    try:\n        session_state = load_session_state()\n        current_directory = session_state.get(\"selected_directory\", os.getcwd())\n        full_path = os.path.join(current_directory, folder_path)\n        \n        if os.path.isdir(full_path):\n            shutil.rmtree(full_path)\n            return jsonify({\"status\": \"success\", \"message\": f\"Folder deleted: {folder_path}\"})\n        else:\n            return jsonify({\"status\": \"error\", \"message\": f\"Folder not found: {folder_path}\"})\n    except Exception as e:\n        return jsonify({\"status\": \"error\", \"message\": str(e)})\n\n@app.route('/rename_folder', methods=['POST'])\ndef rename_folder():\n    data = request.json\n    old_path = data.get('old_path')\n    new_path = data.get('new_path')\n    \n    if not old_path or not new_path:\n        return jsonify({\"status\": \"error\", \"message\": \"Both old and new folder paths are required\"})\n    \n    try:\n        session_state = load_session_state()\n        current_directory = session_state.get(\"selected_directory\", os.getcwd())\n        full_old_path = os.path.join(current_directory, old_path)\n        full_new_path = os.path.join(current_directory, new_path)\n        \n        if os.path.isdir(full_old_path):\n            os.rename(full_old_path, full_new_path)\n            return jsonify({\"status\": \"success\", \"message\": f\"Folder renamed from {old_path} to {new_path}\"})\n        else:\n            return jsonify({\"status\": \"error\", \"message\": f\"Folder not found: {old_path}\"})\n    except Exception as e:\n        return jsonify({\"status\": \"error\", \"message\": str(e)})\n\n\n\n\n\ninitialize_chat_session()\n\nif __name__ == '__main__':\n    socketio.run(app, debug = True, port = 5000)\n\n"
    },
    {
      "role": "assistant",
      "content": "```python\napp.py\n```\n\nThis Flask web application provides a code editor with AI integration and various features. Here's a breakdown:\n\n**1. Core Features:**\n\n*   **File Browsing/Editing:** Browse directories, open/edit files (C++, Python, etc.), and save your work within the application.\n*   **Interactive Shell:** Execute shell commands directly through an embedded terminal.\n*   **Code Execution:** Run C++ or Python code with input and see the output directly within the application.\n*   **Resizable panels:** Adjust the split-screen layout between your code editor, file tree, IO containers, chat, and terminal for optimal workflow.\n\n**2. AI Integration:**\n\n*   **AI Assistant:** Engage in conversations with an AI assistant (OpenAI GPT-4o-mini or Anthropic Claude-3.5-sonnet) to ask coding-related questions or seek assistance. The AI model choice is adjustable.\n*   **AI Suggestions:** Get code suggestions from the AI assistant based on a prompt and selected code. The AI understands related files tagged within the chat.\n\n**3. Git Integration:**\n\n*   **Git Status:** View basic repository information like current branch, commit hash, modified files, and unpushed commits.\n*   **Commit History:** See the up-to 50 most recent commits in the git repository..\n*   **Git Diff:** View the changes between different versions of your code using the Git diff tool.\n\n**4. Additional Features:**\n\n*   **Hardware Stats:** Monitor your system's CPU usage, available memory, and disk space.\n*   **Command Palette (Ctrl+P):** Execute commands like creating, deleting, and renaming files and folders. You can also ask the AI for suggestions about highlighted code. \n*   **Persistent Session:** Session state (selected directory) is saved and loaded between sessions.\n*   **Chat History:** Chat history with the AI is also persistent between sessions (up to the last 5 exchanges). You can also clear the history of your current session.\n*   **PWA (Progressive Web App) Features:** Hints that the application is intended for use as a PWA with the inclusion of `manifest.json` and `service-worker.js`.\n\n**5. Technologies Used:**\n\nThe application is built with Flask, Flask-SocketIO for handling terminal interactions, OpenAI and Anthropic APIs for AI functionalities, subprocess for executing code and external commands, psutil for hardware monitoring, and other supporting libraries."
    }
  ],
  "tagged_file_contents": {
    "app.py": "from flask import Flask, render_template, request, jsonify, session\nfrom flask_socketio import SocketIO, emit\nfrom datetime import timedelta\nimport os\nimport subprocess\nimport tempfile\nfrom openai import OpenAI\nimport markdown\nimport psutil\nimport pty\nimport select\nimport termios\nimport struct\nimport fcntl\nimport logging\nimport re\nimport json\nimport shutil\n\nimport anthropic\nfrom flask import send_from_directory\n\n\n\n\napp = Flask(__name__)\napp.secret_key = 'your_secret_key_here'  # Replace with a real secret key\n\napp.config['SESSION_TYPE'] = 'filesystem'\napp.config['SESSION_PERMANENT'] = False\n\napi_key_anthropic = os.environ.get(\"ANTHROPIC\")\nclient_anthropic = anthropic.Anthropic(\n    api_key=api_key_anthropic,\n)\n\n\n\n\nsocketio = SocketIO(app)\n# Configure OpenAI API\nclient = OpenAI(                                                                                               \n        base_url=\"https://openrouter.ai/api/v1\",                                                                   \n        api_key=os.environ.get(\"OPEN_ROUTER_KEY\"),                                                                                           \n    )  \n\n\nSESSION_DIR = os.path.join(os.path.dirname(os.path.abspath(__file__)), '.editor_session')\nos.makedirs(SESSION_DIR, exist_ok=True)\nSESSION_FILE = os.path.join(SESSION_DIR, 'session_state.json')\n\nCHAT_SESSION_DIR = os.path.join(os.path.dirname(os.path.abspath(__file__)), '.editor_session')\nCHAT_SESSION_FILE = os.path.join(CHAT_SESSION_DIR, '.chat_session.json')\n\n\ndef load_chat_session():\n    if os.path.exists(CHAT_SESSION_FILE):\n        with open(CHAT_SESSION_FILE, 'r') as f:\n            return json.load(f)\n    return {\"conversation_history\": [], \"tagged_file_contents\": {}}\n\ndef save_chat_session(chat_session):\n    with open(CHAT_SESSION_FILE, 'w') as f:\n        json.dump(chat_session, f, indent=2)\n\n\ndef load_session_state():\n    try:\n        if os.path.exists(SESSION_FILE) and os.path.getsize(SESSION_FILE) > 0:\n            with open(SESSION_FILE, 'r') as f:\n                return json.load(f)\n    except json.JSONDecodeError:\n        print(f\"Error decoding JSON from {SESSION_FILE}. Using default state.\")\n    except Exception as e:\n        print(f\"Error loading session state: {str(e)}. Using default state.\")\n    \n    return {\"selected_directory\": os.getcwd()}\n\ndef save_session_state(state):\n    try:\n        with open(SESSION_FILE, 'w') as f:\n            json.dump(state, f, indent=2)\n    except Exception as e:\n        print(f\"Error saving session state: {str(e)}\")\n\n\n\n@app.route('/')\ndef index():\n    return render_template('index.html')\n\n\n\n@app.route('/browse_directory', methods=['GET'])\ndef browse_directory():\n\n    directory = os.getcwd()\n\n\n    if directory:\n        try:\n            items = os.listdir(directory)\n            directories = [d for d in items if os.path.isdir(os.path.join(directory, d))]\n            files = [f for f in items if os.path.isfile(os.path.join(directory, f))]\n            session['current_directory'] = os.path.abspath(directory)  # Use absolute path\n            print('current_directory')\n            print(session['current_directory'])\n\n\n            session_state = load_session_state()\n            print(\"session_state\")\n            print(session_state)\n            session_state[\"selected_directory\"] = os.path.abspath(directory)\n            save_session_state(session_state)\n\n\n            return jsonify({\n                \"status\": \"success\",\n                \"current_path\": session['current_directory'],\n                \"directories\": directories,\n                \"files\": files\n            })\n        except Exception as e:\n            return jsonify({\"status\": \"error\", \"message\": str(e)})\n    else:\n        return jsonify({\"status\": \"cancelled\"})\n\n\n@app.route('/manifest.json')\ndef manifest():\n    return send_from_directory('static', 'manifest.json')\n\n@app.route('/service-worker.js')\ndef service_worker():\n    return send_from_directory('static', 'service-worker.js')\n\n\n@app.route('/file/<path:filepath>')\ndef get_file_content(filepath):\n    try:\n        session_state = load_session_state()\n        current_directory = session_state.get(\"selected_directory\", os.getcwd())\n        full_path = '/'+filepath     \n        # Ensure the requested file is within the current directory\n        if not os.path.abspath(full_path).startswith(os.path.abspath(current_directory)):\n            return jsonify({\"status\": \"error\", \"message\": \"Access denied\"})\n        \n        if os.path.isfile(full_path):\n            with open(full_path, 'r') as file:\n                content = file.read()\n            return jsonify({\"status\": \"success\", \"content\": content})\n        else:\n            return jsonify({\"status\": \"error\", \"message\": \"File not found\"})\n    except Exception as e:\n        return jsonify({\"status\": \"error\", \"message\": str(e)})\n\n\n\n\n@app.route('/select_directory', methods=['POST'])\ndef select_directory():\n    directory = request.json['directory']\n    if os.path.isdir(directory):\n        session['current_directory'] = directory\n        return jsonify({\"status\": \"success\", \"directory\": directory})\n    else:\n        return jsonify({\"status\": \"error\", \"message\": \"Invalid directory\"})\n\n@app.route('/files')\ndef get_files():\n    directory = session.get('current_directory', '')\n    if not directory:\n        return jsonify({\"status\": \"error\", \"message\": \"No directory selected\"})\n    \n    files = [f for f in os.listdir(directory) if os.path.isfile(os.path.join(directory, f))]\n    return jsonify({\"status\": \"success\", \"files\": files})\n\n\n\n\n\ndef create_directory_structure(path):\n    structure = {\"name\": os.path.basename(path), \"type\": \"directory\", \"path\": path, \"children\": []}\n\n    try:\n        with os.scandir(path) as entries:\n            for entry in entries:\n                if entry.is_dir():\n                    structure[\"children\"].append(create_directory_structure(entry.path))\n                else:\n                    structure[\"children\"].append({\n                        \"name\": entry.name,\n                        \"type\": \"file\",\n                        \"path\": entry.path\n                    })\n    except PermissionError:\n        structure[\"children\"].append({\"name\": \"Permission Denied\", \"type\": \"error\"})\n    return structure\n\n\n@app.route('/get_directory_structure')\ndef get_directory_structure():\n    try:\n        print(\"get director structure\")\n\n        session_state = load_session_state()\n        current_directory = session_state.get(\"selected_directory\", os.getcwd())\n\n        print(current_directory)\n\n        structure = create_directory_structure(current_directory)\n        return jsonify({\n            \"status\": \"success\",\n            \"current_directory\": current_directory,\n            \"structure\": structure\n        })\n    except Exception as e:\n        return jsonify({\"status\": \"error\", \"message\": str(e)})\n\n\n@app.route('/save', methods=['POST'])\ndef save_file():\n    data = request.json\n    filename = data['filename']\n    content = data['content']\n    directory = session.get('current_directory', '')\n    if not directory:\n        return jsonify({\"status\": \"error\", \"message\": \"No directory selected\"})\n    \n    file_path = os.path.join(directory, filename)\n    try:\n        with open(file_path, 'w') as file:\n            file.write(content)\n        return jsonify({\"status\": \"success\"})\n    except Exception as e:\n        return jsonify({\"status\": \"error\", \"message\": str(e)})\n\n@app.route('/run', methods=['POST'])\ndef run_code():\n    data = request.json\n    filename = data['filename']\n    user_input = data.get('input', '')\n    directory = session.get('current_directory', '')\n    if not directory:\n        return jsonify({\"status\": \"error\", \"message\": \"No directory selected\"})\n    \n    file_path = os.path.join(directory, filename)\n    \n    if filename.endswith('.cpp'):\n        with tempfile.NamedTemporaryFile(suffix='.exe', delete=False) as temp_exe:\n            executable = temp_exe.name\n        \n        compile_command = f\"g++ {file_path} -o {executable}\"\n        compile_process = subprocess.run(compile_command, shell=True, capture_output=True, text=True)\n        \n        if compile_process.returncode != 0:\n            return jsonify({\"status\": \"error\", \"output\": f\"Compilation error:\\n{compile_process.stderr}\"})\n        \n        try:\n            run_process = subprocess.run(executable, input=user_input, shell=True, capture_output=True, text=True, timeout=5)\n            output = run_process.stdout\n            error = run_process.stderr\n            \n            if run_process.returncode != 0:\n                return jsonify({\"status\": \"error\", \"output\": f\"Runtime error:\\n{error}\"})\n            \n            return jsonify({\"status\": \"success\", \"output\": output or \"Program ran successfully, but produced no output.\"})\n        except subprocess.TimeoutExpired:\n            return jsonify({\"status\": \"error\", \"output\": \"Program execution timed out after 5 seconds.\"})\n        except Exception as e:\n            return jsonify({\"status\": \"error\", \"output\": f\"An error occurred: {str(e)}\"})\n        finally:\n            os.remove(executable)\n\n    elif filename.endswith('.py'):\n    # Run Python code\n        try:\n            run_process = subprocess.run(['python', file_path], input=user_input, text=True, capture_output=True, timeout=5)\n            output = run_process.stdout\n            error = run_process.stderr\n\n            if run_process.returncode != 0:\n                return jsonify({\"status\": \"error\", \"output\": f\"Runtime error:\\n{error}\"})\n\n            return jsonify({\"status\": \"success\", \"output\": output or \"Program ran successfully, but produced no output.\"})\n        except subprocess.TimeoutExpired:\n            return jsonify({\"status\": \"error\", \"output\": \"Program execution timed out after 5 seconds.\"})\n        except Exception as e:\n            return jsonify({\"status\": \"error\", \"output\": f\"An error occurred: {str(e)}\"})\n\n\n\n@app.route('/chat', methods=['POST'])\ndef chat():\n    data = request.json\n    code = data['code']\n    user_message = data['message']\n    tagged_files = data.get('taggedFiles', [])\n    model = data.get('model', 'openai/gpt-4o-mini')  # Default to GPT-4o-mini if not specified\n    print(model)\n    \n    # Load the current chat session\n    chat_session = load_chat_session()\n    \n    # Fetch content of newly tagged files and add to existing tagged files\n    session_state = load_session_state()\n    current_directory = session_state.get(\"selected_directory\", os.getcwd())\n    for file_path in tagged_files:\n        if file_path not in chat_session['tagged_file_contents']:\n            full_path = os.path.join(current_directory, file_path)\n            if os.path.isfile(full_path):\n                with open(full_path, 'r') as file:\n                    chat_session['tagged_file_contents'][file_path] = file.read()\n            else:\n                chat_session['tagged_file_contents'][file_path] = f\"File not found: {file_path}\"\n    \n    # Prepare the prompt with all tagged file contents\n    prompt = f\"User's question: {user_message}\\n\\n\"\n    prompt += f\"Current file contents:\\n{code}\\n\\n\"\n    for file_path, content in chat_session['tagged_file_contents'].items():\n        prompt += f\"Contents of {file_path}:\\n{content}\\n\\n\"\n    \n    # Add the new prompt to the conversation history\n    chat_session['conversation_history'].append({\"role\": \"user\", \"content\": prompt})\n    print(\"Current conversation history:\")\n    print(chat_session['conversation_history'])\n    \n    # Prepare the messages for the API call\n    messages = [\n        {\"role\": \"system\", \"content\": \"You are a helpful coding assistant. The user will provide you with code and questions about it. Always give your response in markdown format. It should be always markdown, remember that.\"},\n    ] + chat_session['conversation_history']\n    \n    try:\n        if model == \"anthropic/claude-3.5-sonnet\":\n            response = client_anthropic.messages.create(\n                model=\"claude-3-sonnet-20240229\",\n                temperature=0,\n                max_tokens = 4096,\n                system=\"You are a helpful coding assistant. The user will provide you with code and questions about it. Always return your output in markdown so that i can correctly render it.\",\n                messages=chat_session['conversation_history']\n            )\n        else:\n            response = client.chat.completions.create(\n                model=model,\n                messages=messages\n            )\n\n        ai_response = \"\"\n\n        if model == \"anthropic/claude-3.5-sonnet\":\n            ai_response = response.content[0].text\n        else:\n            ai_response = response.choices[0].message.content\n        \n        # Add the AI's response to the conversation history\n        chat_session['conversation_history'].append({\"role\": \"assistant\", \"content\": ai_response})\n        \n        # Limit the conversation history to the last 10 messages (5 exchanges)\n        if len(chat_session['conversation_history']) > 10:\n            chat_session['conversation_history'] = chat_session['conversation_history'][-10:]\n        \n        # Save the updated chat session\n        save_chat_session(chat_session)\n        \n        return jsonify({\"status\": \"success\", \"response\": ai_response})\n    except Exception as e:\n        print(\"Error:\", str(e))\n        return jsonify({\"status\": \"error\", \"message\": str(e)})\n\n# Add this route to clear the chat session\n@app.route('/clear_chat_session', methods=['POST'])\ndef clear_chat_session():\n    if os.path.exists(CHAT_SESSION_FILE):\n        os.remove(CHAT_SESSION_FILE)\n    return jsonify({\"status\": \"success\", \"message\": \"Chat session cleared\"})\n\n# Call this function when your Flask app starts\ndef initialize_chat_session():\n    if not os.path.exists(CHAT_SESSION_FILE):\n        save_chat_session({\"conversation_history\": [], \"tagged_file_contents\": {}})\n\n\n\n@app.route('/ai_suggestion', methods=['POST'])\ndef ai_suggestion():\n    data = request.json\n    prompt = data['prompt']\n    selected_code = data['code']\n    \n    try:\n        # Prepare the messages for the API call\n        messages = [\n            {\"role\": \"system\", \"content\": \"You are an AI coding assistant. Provide code suggestions based on the given prompt and selected code. Only return the suggested code, without any explanations or markdown formatting.\"},\n            {\"role\": \"user\", \"content\": f\"Prompt: {prompt}\\n\\nSelected Code:\\n{selected_code}\"}\n        ]\n        \n        response = client.chat.completions.create(\n            model=\"openai/gpt-4o-mini\",  # You can change this to the desired model\n            messages=messages\n        )\n        \n        ai_suggestion = response.choices[0].message.content.strip()\n        \n        return jsonify({\"status\": \"success\", \"suggestion\": ai_suggestion})\n    except Exception as e:\n        print(\"Error:\", str(e))\n        return jsonify({\"status\": \"error\", \"message\": str(e)})\n\n\n\n\ndef get_current_directory():\n    return session.get('current_directory', os.getcwd())\n\n\n\n@app.route('/hardware_stats')\ndef hardware_stats():\n    cpu_usage = psutil.cpu_percent()\n    memory = psutil.virtual_memory()\n    disk = psutil.disk_usage('/')\n\n    stats = {\n        'cpu_usage': round(cpu_usage, 1),\n        'memory_used': round(memory.used / (1024**3), 1),\n        'memory_total': round(memory.total / (1024**3), 1),\n        'disk_used': round(disk.used / (1024**3), 1),\n        'disk_total': round(disk.total / (1024**3), 1)\n    }\n    \n    logging.info(f\"Hardware stats: {stats}\")\n    return jsonify(stats)\n\n\n\n@socketio.on('connect', namespace='/terminal')\ndef terminal_connect():\n    print('Client connected to terminal')\n\n@socketio.on('disconnect', namespace='/terminal')\ndef terminal_disconnect():\n    print('Client disconnected from terminal')\n\n@socketio.on('command', namespace='/terminal')\ndef handle_command(command):\n    print(f'Received command: {command}')\n    try:\n        # Execute the command\n        result = subprocess.run(command, shell=True, capture_output=True, text=True, timeout=10)\n        output = result.stdout + result.stderr\n        if not output:\n            output = f\"Command executed: {command}\\n\"\n    except subprocess.TimeoutExpired:\n        output = \"Command execution timed out\\n\"\n    except Exception as e:\n        output = f\"Error executing command: {str(e)}\\n\"\n    \n    emit('output', output)\n\n\n\n\nimport html\n\n@app.route('/git_diff', methods=['POST'])\ndef git_diff():\n    try:\n        directory = session.get('current_directory', '')\n        if not directory:\n            return jsonify({\"status\": \"error\", \"message\": \"No directory selected\"})\n        \n        commit_hash = request.json.get('commit_hash', 'HEAD')\n        \n        result = subprocess.run(['git', 'diff', commit_hash],\n                                cwd=directory,\n                                capture_output=True,\n                                text=True,\n                                check=True)\n        \n        diff_lines = result.stdout.split('\\n')\n        processed_diff = []\n        current_file = \"\"\n        line_number_old = 0\n        line_number_new = 0\n        \n        for line in diff_lines:\n            # Escape HTML characters to prevent rendering\n            escaped_line = html.escape(line)\n            \n            if line.startswith('diff --git'):\n                if current_file:\n                    processed_diff.append('</table></div>')\n                current_file = line.split()[-1].split('/')[-1]\n                processed_diff.append(f'<div class=\"diff-file\"><h3>{html.escape(current_file)}</h3><table>')\n                line_number_old = 0\n                line_number_new = 0\n            elif line.startswith('+++') or line.startswith('---'):\n                processed_diff.append(f'<tr><td colspan=\"3\" class=\"diff-header\">{escaped_line}</td></tr>')\n            elif line.startswith('@@'):\n                match = re.match(r'@@ -(\\d+),\\d+ \\+(\\d+),\\d+ @@', line)\n                if match:\n                    line_number_old = int(match.group(1))\n                    line_number_new = int(match.group(2))\n                processed_diff.append(f'<tr><td colspan=\"3\" class=\"diff-header\">{escaped_line}</td></tr>')\n            else:\n                if line.startswith('+'):\n                    processed_diff.append(f'<tr class=\"diff-added\"><td></td><td>{line_number_new}</td><td>{escaped_line}</td></tr>')\n                    line_number_new += 1\n                elif line.startswith('-'):\n                    processed_diff.append(f'<tr class=\"diff-removed\"><td>{line_number_old}</td><td></td><td>{escaped_line}</td></tr>')\n                    line_number_old += 1\n                else:\n                    processed_diff.append(f'<tr><td>{line_number_old}</td><td>{line_number_new}</td><td>{escaped_line}</td></tr>')\n                    line_number_old += 1\n                    line_number_new += 1\n        \n        if current_file:\n            processed_diff.append('</table></div>')\n        \n        html_diff = '\\n'.join(processed_diff)\n        \n        return jsonify({\"status\": \"success\", \"diff\": html_diff})\n    except subprocess.CalledProcessError as e:\n        return jsonify({\"status\": \"error\", \"message\": f\"Git diff failed: {e.stderr}\"})\n    except Exception as e:\n        return jsonify({\"status\": \"error\", \"message\": str(e)})\n\n\n\n\n\n@app.route('/git_info')\ndef get_git_info():\n    try:\n        directory = session.get('current_directory', '')\n        if not directory:\n            return jsonify({\"status\": \"error\", \"message\": \"No directory selected\"})\n\n        # Get current branch\n        branch = subprocess.check_output(['git', 'rev-parse', '--abbrev-ref', 'HEAD'], \n                                         cwd=directory, text=True).strip()\n\n        # Get commit hash\n        commit_hash = subprocess.check_output(['git', 'rev-parse', '--short', 'HEAD'], \n                                              cwd=directory, text=True).strip()\n\n        # Get number of modified files\n        status_output = subprocess.check_output(['git', 'status', '--porcelain'], \n                                                cwd=directory, text=True)\n        modified_files = len(status_output.splitlines())\n\n        # Get number of unpushed commits\n        unpushed = subprocess.check_output(['git', 'log', '@{u}..'], \n                                           cwd=directory, text=True)\n        unpushed_commits = len(unpushed.splitlines()) // 6  # Divide by 6 as each commit has 6 lines in the log\n\n        return jsonify({\n            \"status\": \"success\",\n            \"branch\": branch,\n            \"commit\": commit_hash,\n            \"modified_files\": modified_files,\n            \"unpushed_commits\": unpushed_commits\n        })\n    except subprocess.CalledProcessError as e:\n        return jsonify({\"status\": \"error\", \"message\": f\"Git command failed: {str(e)}\"})\n    except Exception as e:\n        return jsonify({\"status\": \"error\", \"message\": str(e)})\n\n\n\n@app.route('/get_commits', methods=['GET'])\ndef get_commits():\n    try:\n        directory = session.get('current_directory', '')\n        if not directory:\n            return jsonify({\"status\": \"error\", \"message\": \"No directory selected\"})\n        \n        result = subprocess.run(['git', 'log', '--pretty=format:%H|%s', '-n', '50'],\n                                cwd=directory,\n                                capture_output=True,\n                                text=True,\n                                check=True)\n        \n        commits = [{'hash': line.split('|')[0], 'message': line.split('|')[1]} \n                   for line in result.stdout.split('\\n') if line]\n        \n        return jsonify({\"status\": \"success\", \"commits\": commits})\n    except subprocess.CalledProcessError as e:\n        return jsonify({\"status\": \"error\", \"message\": f\"Failed to get commits: {e.stderr}\"})\n    except Exception as e:\n        return jsonify({\"status\": \"error\", \"message\": str(e)})\n\n\n\n\n\n\n\n@app.route('/add_file', methods=['POST'])\ndef add_file():\n    data = request.json\n    file_path = data.get('file_path')\n    \n    if not file_path:\n        return jsonify({\"status\": \"error\", \"message\": \"File path is required\"})\n    \n    try:\n        session_state = load_session_state()\n        current_directory = session_state.get(\"selected_directory\", os.getcwd())\n        full_path = os.path.join(current_directory, file_path)\n        \n        # Create any necessary directories\n        os.makedirs(os.path.dirname(full_path), exist_ok=True)\n        \n        # Create the file\n        with open(full_path, 'w') as f:\n            pass  # Create an empty file\n        \n        return jsonify({\"status\": \"success\", \"message\": f\"File created: {file_path}\"})\n    except Exception as e:\n        return jsonify({\"status\": \"error\", \"message\": str(e)})\n\n@app.route('/rename_file', methods=['POST'])\ndef rename_file():\n    data = request.json\n    old_path = data.get('old_path')\n    new_path = data.get('new_path')\n    \n    if not old_path or not new_path:\n        return jsonify({\"status\": \"error\", \"message\": \"Both old and new file paths are required\"})\n    \n    try:\n        session_state = load_session_state()\n        current_directory = session_state.get(\"selected_directory\", os.getcwd())\n        full_old_path = os.path.join(current_directory, old_path)\n        full_new_path = os.path.join(current_directory, new_path)\n        \n        if os.path.isfile(full_old_path):\n            os.rename(full_old_path, full_new_path)\n            return jsonify({\"status\": \"success\", \"message\": f\"File renamed from {old_path} to {new_path}\"})\n        else:\n            return jsonify({\"status\": \"error\", \"message\": f\"File not found: {old_path}\"})\n    except Exception as e:\n        return jsonify({\"status\": \"error\", \"message\": str(e)})\n\n@app.route('/delete_file', methods=['POST'])\ndef delete_file():\n    data = request.json\n    file_path = data.get('file_path')\n    \n    if not file_path:\n        return jsonify({\"status\": \"error\", \"message\": \"File path is required\"})\n    \n    try:\n        session_state = load_session_state()\n        current_directory = session_state.get(\"selected_directory\", os.getcwd())\n        full_path = os.path.join(current_directory, file_path)\n        \n        if os.path.isfile(full_path):\n            os.remove(full_path)\n            return jsonify({\"status\": \"success\", \"message\": f\"File deleted: {file_path}\"})\n        else:\n            return jsonify({\"status\": \"error\", \"message\": f\"File not found: {file_path}\"})\n    except Exception as e:\n        return jsonify({\"status\": \"error\", \"message\": str(e)})\n\n\n\n\n\n\n\n@app.route('/add_folder', methods=['POST'])\ndef add_folder():\n    data = request.json\n    folder_path = data.get('folder_path')\n    \n    if not folder_path:\n        return jsonify({\"status\": \"error\", \"message\": \"Folder path is required\"})\n    \n    try:\n        session_state = load_session_state()\n        current_directory = session_state.get(\"selected_directory\", os.getcwd())\n        full_path = os.path.join(current_directory, folder_path)\n        \n        os.makedirs(full_path, exist_ok=True)\n        \n        return jsonify({\"status\": \"success\", \"message\": f\"Folder created: {folder_path}\"})\n    except Exception as e:\n        return jsonify({\"status\": \"error\", \"message\": str(e)})\n\n@app.route('/delete_folder', methods=['POST'])\ndef delete_folder():\n    data = request.json\n    folder_path = data.get('folder_path')\n    \n    if not folder_path:\n        return jsonify({\"status\": \"error\", \"message\": \"Folder path is required\"})\n    \n    try:\n        session_state = load_session_state()\n        current_directory = session_state.get(\"selected_directory\", os.getcwd())\n        full_path = os.path.join(current_directory, folder_path)\n        \n        if os.path.isdir(full_path):\n            shutil.rmtree(full_path)\n            return jsonify({\"status\": \"success\", \"message\": f\"Folder deleted: {folder_path}\"})\n        else:\n            return jsonify({\"status\": \"error\", \"message\": f\"Folder not found: {folder_path}\"})\n    except Exception as e:\n        return jsonify({\"status\": \"error\", \"message\": str(e)})\n\n@app.route('/rename_folder', methods=['POST'])\ndef rename_folder():\n    data = request.json\n    old_path = data.get('old_path')\n    new_path = data.get('new_path')\n    \n    if not old_path or not new_path:\n        return jsonify({\"status\": \"error\", \"message\": \"Both old and new folder paths are required\"})\n    \n    try:\n        session_state = load_session_state()\n        current_directory = session_state.get(\"selected_directory\", os.getcwd())\n        full_old_path = os.path.join(current_directory, old_path)\n        full_new_path = os.path.join(current_directory, new_path)\n        \n        if os.path.isdir(full_old_path):\n            os.rename(full_old_path, full_new_path)\n            return jsonify({\"status\": \"success\", \"message\": f\"Folder renamed from {old_path} to {new_path}\"})\n        else:\n            return jsonify({\"status\": \"error\", \"message\": f\"Folder not found: {old_path}\"})\n    except Exception as e:\n        return jsonify({\"status\": \"error\", \"message\": str(e)})\n\n\n\n\n\ninitialize_chat_session()\n\nif __name__ == '__main__':\n    socketio.run(app, debug = True, port = 5000)"
  }
}