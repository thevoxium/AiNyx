{
  "conversation_history": [
    {
      "role": "user",
      "content": "User's question: How to write a flask socket io function to find the available ports, can you check the file @app.py\n\nCurrent file contents:\n/* Catppuccin Mocha Theme Colors */\n:root {\n    --ctp-rosewater: #f5e0dc;\n    --ctp-flamingo: #f2cdcd;\n    --ctp-pink: #f5c2e7;\n    --ctp-mauve: #cba6f7;\n    --ctp-red: #f38ba8;\n    --ctp-maroon: #eba0ac;\n    --ctp-peach: #fab387;\n    --ctp-yellow: #f9e2af;\n    --ctp-green: #a6e3a1;\n    --ctp-teal: #94e2d5;\n    --ctp-sky: #89dceb;\n    --ctp-sapphire: #74c7ec;\n    --ctp-blue: #89b4fa;\n    --ctp-lavender: #b4befe;\n    --ctp-text: #cdd6f4;\n    --ctp-subtext1: #bac2de;\n    --ctp-subtext0: #a6adc8;\n    --ctp-overlay2: #9399b2;\n    --ctp-overlay1: #7f849c;\n    --ctp-overlay0: #6c7086;\n    --ctp-surface2: #585b70;\n    --ctp-surface1: #45475a;\n    --ctp-surface0: #313244;\n    --ctp-base: #1e1e2e;\n    --ctp-mantle: #181825;\n    --ctp-crust: #11111b;\n}\n\n/* Base styles */\nbody {\n    font-family: 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif;\n    margin: 0;\n    padding: 0;\n    background-color: var(--ctp-base);\n    color: var(--ctp-text);\n}\n\n/* Layout */\n#app {\n    display: flex;\n    height: 100vh;\n    overflow: hidden; /* Prevent scrolling on the main container */\n}\n\n#sidebar, #chat-container {\n    width: 250px;\n    min-width: 200px;\n    max-width: 30%;\n    background-color: var(--ctp-surface0);\n    display: flex;\n    flex-direction: column;\n    border-right: 1px solid var(--ctp-surface1);\n}\n\n#chat-container {\n    display: none;\n    border-left: 1px solid var(--ctp-surface1);\n    border-right: none;\n}\n\n#editor-container {\n    display: flex;\n    flex-direction: column;\n    flex: 1;\n    min-width: 300px;\n    height: 100%; /* Ensure it takes full height */\n    overflow: hidden; /* Prevent scrolling within the editor container */\n}\n\n#io-container {\n    width: 300px;\n    min-width: 200px;\n    max-width: 40%;\n    display: none;\n    flex-direction: column;\n    background-color: var(--ctp-surface0);\n    border-left: 1px solid var(--ctp-surface1);\n}\n\n/* Sidebar styles */\n#directory-browser, #chat-header {\n    padding: 15px;\n}\n\n#directory-browser h2, #chat-header h2, #file-list h2 {\n    margin-top: 0;\n    margin-bottom: 15px;\n    font-size: 1.2em;\n    color: var(--ctp-subtext0);\n}\n\n#current-path {\n    font-size: 0.9em;\n    margin-bottom: 15px;\n    word-wrap: break-word;\n    padding: 8px;\n    background-color: var(--ctp-surface1);\n    border-radius: 4px;\n}\n\n#directory-list, #file-list {\n    max-height: 300px;\n    overflow-y: auto;\n}\n\n#directory-list div, #file-list div {\n    cursor: pointer;\n    padding: 8px;\n    margin: 2px 0;\n    border-radius: 4px;\n    transition: background-color 0.2s ease;\n}\n\n#directory-list div:hover, #file-list div:hover {\n    background-color: var(--ctp-surface1);\n}\n\n\n\n#tabs-container {\n    display: flex;\n    overflow-x: auto;\n    background-color: var(--ctp-mantle);\n    padding: 5px 5px 0;\n    position: relative;\n    top: 0;\n    left: 0;\n    right: 0;\n    z-index: 10;\n    height: 32px; /* Reduced height */\n}\n\n.tab {\n    padding: 2px 10px;\n    background-color: var(--ctp-surface0);\n    color: var(--ctp-text);\n    border-top-left-radius: 9px;\n    border-top-right-radius: 9px;\n    border-bottom-left-radius: 9px;\n    border-bottom-right-radius: 9px;\n    margin-right: 2px;\n    cursor: pointer;\n    display: flex;\n    align-items: center;\n    height: 26px; /* Reduced height */\n    font-size: 12px; /* Smaller font size */\n    transition: background-color 0.2s ease;\n}\n\n.tab:hover {\n    background-color: var(--ctp-surface1);\n}\n\n.tab.active {\n    background-color: var(--ctp-blue);\n    color: var(--ctp-base);\n    font-weight: bold;\n}\n\n.close-tab {\n    margin-left: 6px;\n    color: var(--ctp-overlay0);\n    transition: color 0.2s ease;\n    font-size: 25px; /* Smaller close button */\n}\n\n.tab:hover .close-tab,\n.tab.active .close-tab {\n    color: var(--ctp-text);\n}\n\n.close-tab:hover {\n    color: var(--ctp-red);\n}\n\n#editor {\n    flex-grow: 1;\n    margin-top: 32px; /* Match the height of #tabs-container */\n    overflow: auto;\n}\n\n/* Hide scrollbar for tab container */\n#tabs-container::-webkit-scrollbar {\n    display: none;\n}\n\n#tabs-container {\n    -ms-overflow-style: none;  /* IE and Edge */\n    scrollbar-width: none;  /* Firefox */\n}\n\n\n/* Ensure the Monaco editor container takes full height */\n.monaco-editor {\n    height: 100% !important;\n}\n\n\n/* Button styles */\n.button-container {\n    background-color: var(--ctp-mantle);\n    padding: 10px;\n    border-radius: 4px;\n    display: flex;\n    gap: 10px;\n}\n\n.btn {\n    background-color: var(--ctp-surface1);\n    border: none;\n    color: var(--ctp-text);\n    cursor: pointer;\n    padding: 6px 12px;\n    border-radius: 3px;\n    transition: background-color 0.3s;\n    display: flex;\n    align-items: center;\n    gap: 6px;\n    font-size: 14px;\n}\n\n.btn:hover {\n    background-color: var(--ctp-surface2);\n}\n\n.btn svg {\n    width: 16px;\n    height: 16px;\n}\n\n.tooltip {\n    position: relative;\n}\n\n.tooltip::after {\n    content: attr(aria-label);\n    position: absolute;\n    bottom: 100%;\n    left: 50%;\n    transform: translateX(-50%);\n    background-color: var(--ctp-surface1);\n    color: var(--ctp-text);\n    padding: 4px 8px;\n    border-radius: 4px;\n    font-size: 12px;\n    white-space: nowrap;\n    opacity: 0;\n    visibility: hidden;\n    transition: opacity 0.3s, visibility 0.3s;\n}\n\n.tooltip:hover::after {\n    opacity: 1;\n    visibility: visible;\n}\n\n#save-notification {\n    margin-left: 10px;\n    padding: 5px 10px;\n    border-radius: 4px;\n    display: none;\n    font-size: 14px;\n}\n\n#save-notification.success {\n    background-color: var(--ctp-green);\n    color: var(--ctp-base);\n}\n\n#save-notification.error {\n    background-color: var(--ctp-red);\n    color: var(--ctp-base);\n}\n\n/* Input/Output styles */\n#input, #output {\n    padding: 15px;\n    flex-grow: 1;\n    display: flex;\n    flex-direction: column;\n}\n\n#input h2, #output h2 {\n    margin-top: 0;\n    margin-bottom: 10px;\n    font-size: 1.2em;\n    color: var(--ctp-subtext0);\n}\n\n#input-area, #output-area {\n    flex-grow: 1;\n    background-color: var(--ctp-base);\n    color: var(--ctp-text);\n    border: 1px solid var(--ctp-surface1);\n    padding: 10px;\n    font-family: 'Consolas', 'Courier New', monospace;\n    border-radius: 4px;\n}\n\n#input-area {\n    resize: none;\n}\n\n#output-area {\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    overflow-y: auto;\n}\n\n/* Resizer */\n.resizer {\n    width: 5px;\n    background: var(--ctp-surface1);\n    cursor: col-resize;\n    transition: background 0.2s;\n}\n\n.resizer:hover {\n    background: var(--ctp-surface2);\n}\n\n/* Scrollbar Styles */\n::-webkit-scrollbar {\n    width: 10px;\n    height: 10px;\n}\n\n::-webkit-scrollbar-track {\n    background: var(--ctp-base);\n}\n\n::-webkit-scrollbar-thumb {\n    background: var(--ctp-surface2);\n    border-radius: 5px;\n}\n\n::-webkit-scrollbar-thumb:hover {\n    background: var(--ctp-surface1);\n}\n\n/* Chat styles */\n#chat-messages {\n    flex-grow: 1;\n    overflow-y: auto;\n    padding: 15px;\n}\n\n#chat-input {\n    display: flex;\n    padding: 15px;\n    border-top: 1px solid var(--ctp-surface1);\n}\n\n#chat-input-area {\n    flex-grow: 1;\n    min-height: 20px;\n    max-height: 100px;\n    overflow-y: auto;\n    background-color: var(--ctp-base);\n    color: var(--ctp-text);\n    border: 1px solid var(--ctp-surface1);\n    padding: 10px;\n    margin-right: 10px;\n    border-radius: 4px;\n}\n\n#chat-input-area[placeholder]:empty:before {\n    content: attr(placeholder);\n    color: var(--ctp-overlay0);\n}\n\n.chat-message {\n    margin-bottom: 15px;\n    padding: 10px;\n    border-radius: 4px;\n    line-height: 1.5;\n}\n\n.user-message {\n    background-color: var(--ctp-surface1);\n}\n\n.ai-message {\n    background-color: var(--ctp-surface0);\n    border: 1px solid var(--ctp-surface1);\n}\n\n/* Markdown styles for chat messages */\n.chat-message h1, .chat-message h2, .chat-message h3, \n.chat-message h4, .chat-message h5, .chat-message h6 {\n    margin-top: 20px;\n    margin-bottom: 10px;\n    font-weight: bold;\n    color: var(--ctp-subtext0);\n}\n\n.chat-message p {\n    margin-bottom: 10px;\n}\n\n.chat-message pre {\n    background-color: var(--ctp-surface1);\n    border: 1px solid var(--ctp-surface2);\n    border-radius: 4px;\n    padding: 10px;\n    overflow-x: auto;\n    color: var(--ctp-text);\n    margin-bottom: 16px;\n}\n\n.chat-message code {\n    font-family: 'Consolas', 'Courier New', monospace;\n    font-size: 14px;\n    line-height: 1.4;\n    background-color: var(--ctp-surface1);\n    padding: 2px 4px;\n    border-radius: 3px;\n}\n\n.chat-message ul, .chat-message ol {\n    padding-left: 20px;\n    margin-bottom: 16px;\n}\n\n.chat-message blockquote {\n    padding: 0 1em;\n    color: var(--ctp-subtext0);\n    border-left: 0.25em solid var(--ctp-surface1);\n    margin: 0 0 16px 0;\n}\n\n.chat-message table {\n    border-collapse: collapse;\n    margin-bottom: 16px;\n}\n\n.chat-message table th, .chat-message table td {\n    padding: 6px 13px;\n    border: 1px solid var(--ctp-surface1);\n}\n\n.chat-message table tr:nth-child(2n) {\n    background-color: var(--ctp-surface0);\n}\n\n.btn {\n    background-color: transparent;\n    border: none;\n    color: var(--ctp-text);\n    cursor: pointer;\n    padding: 6px;\n    border-radius: 3px;\n    transition: background-color 0.3s;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\n.btn:hover {\n    background-color: var(--ctp-surface1);\n}\n\n.btn svg {\n    width: 20px;\n    height: 20px;\n}\n\n.btn-send {\n    color: var(--ctp-blue);\n}\n\n.btn-send:hover {\n    background-color: var(--ctp-surface1);\n}\n\n#chat-input {\n    display: flex;\n    padding: 15px;\n    border-top: 1px solid var(--ctp-surface1);\n    align-items: center;\n}\n\n#chat-input-area {\n    flex-grow: 1;\n    min-height: 20px;\n    max-height: 100px;\n    overflow-y: auto;\n    background-color: var(--ctp-base);\n    color: var(--ctp-text);\n    border: 1px solid var(--ctp-surface1);\n    padding: 10px;\n    margin-right: 10px;\n    border-radius: 4px;\n    font-family: inherit;\n    font-size: 14px;\n    line-height: 1.5;\n}\n\n#chat-input-area[placeholder]:empty:before {\n    content: attr(placeholder);\n    color: var(--ctp-overlay0);\n}\n\n#footer-container {\n    position: sticky;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    z-index: 10;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: 10px 15px;\n    background-color: var(--ctp-mantle);\n    border-top: 1px solid var(--ctp-surface1);\n}\n\n#sidebar, #io-container, #chat-container, #terminal-container {\n    height: 100vh;\n    overflow-y: auto;\n}\n\n#button-container {\n    display: flex;\n    align-items: center;\n}\n\n#hardware-stats-container {\n    display: flex;\n    align-items: center;\n    font-size: 12px;\n    color: var(--ctp-subtext1);\n}\n\n#hardware-stats-container span {\n    margin-left: 15px;\n}\n\n#hardware-stats-container span span {\n    font-weight: bold;\n    color: var(--ctp-green);\n    margin-left: 5px;\n}\n\n\n\n\n/* ... (previous styles) ... */\n\n#terminal-container {\n    width: 40%;\n    min-width: 300px;\n    max-width: 600px;\n    height: 100%;\n    background-color: var(--ctp-base);\n    border-left: 1px solid var(--ctp-surface1);\n    display: none;\n    flex-direction: column;\n}\n\n#terminal {\n    flex-grow: 1;\n    padding: 10px;\n}\n\n.xterm {\n    padding: 10px;\n}\n\n.btn-terminal {\n    background: linear-gradient(to right, var(--ctp-surface0), var(--ctp-surface1));\n}\n\n.btn-terminal:hover {\n    background: linear-gradient(to right, var(--ctp-surface1), var(--ctp-surface2));\n}\n\n/* Adjust the layout to accommodate the new container */\n#editor-container {\n    width: calc(100% - 250px - 40%); /* Adjust based on sidebar and terminal widths */\n}\n\n#terminal-container {\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n    width: 100%;\n    overflow: hidden;\n}\n\n#terminal {\n    flex-grow: 1;\n    width: 100%;\n    height: 100%;\n}\n\n.xterm {\n    padding: 0;\n    margin: 0;\n    height: 100%;\n    width: 100%;\n}\n\n.xterm-viewport, .xterm-screen {\n    height: 100% !important;\n    width: 100% !important;\n}\n\n#directory-browser .button-container {\n    display: flex;\n    justify-content: center;\n    margin: 10px 0;\n}\n\n.btn-browse {\n    background: linear-gradient(to right, var(--ctp-blue), var(--ctp-sapphire));\n    color: var(--ctp-base);\n    border: none;\n    margin-left: 0px;\n    border-radius: 4px;\n    cursor: pointer;\n    transition: background 0.3s ease;\n    display: flex;\n    align-items: center;\n}\n\n.btn-browse:hover {\n    background: linear-gradient(to right, var(--ctp-sapphire), var(--ctp-sky));\n}\n\n.btn-browse .icon {\n    margin-right: 8px;\n}\n\n#current-path {\n    margin-top: 10px;\n    word-wrap: break-word;\n    padding: 5px;\n    background-color: var(--ctp-surface1);\n    border-radius: 4px;\n    font-size: 0.9em;\n    display:none;\n}\n\n#directory-list, #file-list {\n    margin-top: 10px;\n}\n\n.btn-git-diff {\n    background: linear-gradient(to right, var(--ctp-mauve), var(--ctp-blue));\n}\n\n.btn-git-diff:hover {\n    background: linear-gradient(to right, var(--ctp-blue), var(--ctp-sky));\n}\n\n#git-diff-container {\n    display: none;\n    flex-direction: column;\n    width: 100vw;\n    height: 100vh;\n    position: fixed;\n    top: 0;\n    left: 0;\n    background-color: var(--ctp-base);\n    z-index: 9999;\n    overflow: hidden;\n}\n\n#git-diff-header {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: 10px 20px;\n    background-color: var(--ctp-mantle);\n    border-bottom: 1px solid var(--ctp-surface1);\n    position: sticky;\n    top: 0;\n    z-index: 10000;\n}\n\n#git-diff-content {\n    flex-grow: 1;\n    overflow-y: auto;\n    padding: 20px;\n    font-family: 'Consolas', 'Courier New', monospace;\n    font-size: 14px;\n    line-height: 1.5;\n}\n\n#git-diff-header h2 {\n    margin: 0;\n    color: var(--ctp-text);\n}\n\n.btn-close {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    padding: 8px 16px;\n    background-color: var(--ctp-surface1);\n    color: var(--ctp-text);\n    border: none;\n    border-radius: 4px;\n    font-size: 14px;\n    font-weight: 500;\n    cursor: pointer;\n    transition: background-color 0.3s ease;\n}\n\n.btn-close:hover {\n    background-color: var(--ctp-green);\n    color: var(--ctp-crust);\n}\n\n.btn-close svg {\n    margin-right: 8px;\n}\n\n.btn-close span {\n    line-height: 1;\n}\n\n.diff-file {\n    margin-bottom: 20px;\n    border: 1px solid var(--ctp-surface1);\n    border-radius: 4px;\n    overflow: hidden;\n}\n\n.diff-file h3 {\n    margin: 0;\n    padding: 10px;\n    background-color: var(--ctp-surface1);\n    color: var(--ctp-text);\n}\n\n.diff-file table {\n    width: 100%;\n    border-collapse: collapse;\n}\n\n.diff-file td {\n    padding: 0 10px;\n    white-space: pre;\n}\n\n.diff-file td:nth-child(1),\n.diff-file td:nth-child(2) {\n    width: 1%;\n    text-align: right;\n    color: var(--ctp-overlay0);\n    user-select: none;\n}\n\n.diff-header {\n    background-color: var(--ctp-surface0);\n    color: var(--ctp-text);\n}\n\n.diff-added {\n    background-color: var(--ctp-green);\n    color: var(--ctp-base);\n}\n\n.diff-removed {\n    background-color: var(--ctp-red);\n    color: var(--ctp-base);\n}\n\n.diff-added td:nth-child(2),\n.diff-added td:nth-child(3) {\n    color: var(--ctp-base);\n}\n\n.diff-removed td:nth-child(1),\n.diff-removed td:nth-child(3) {\n    color: var(--ctp-base);\n}\n\n#commit-select {\n    margin-left: 20px;\n    padding: 5px;\n    background-color: var(--ctp-surface1);\n    color: var(--ctp-text);\n    border: 1px solid var(--ctp-surface2);\n    border-radius: 4px;\n}\n\n#commit-select:focus {\n    outline: none;\n    border-color: var(--ctp-blue);\n}\n\n.diff-file td:last-child {\n    white-space: pre-wrap;\n    word-wrap: break-word;\n}\n\n.tagged-file {\n    color: var(--ctp-green);\n    font-weight: bold;\n    background-color: rgba(166, 227, 161, 0.1);\n    padding: 2px 4px;\n    border-radius: 3px;\n    transition: background-color 0.3s ease;\n}\n\n.tagged-file:hover {\n    background-color: rgba(166, 227, 161, 0.2);\n}\n\n.btn-directory {\n    background: linear-gradient(to right, var(--ctp-blue), var(--ctp-sapphire));\n}\n\n.btn-directory:hover {\n    background: linear-gradient(to right, var(--ctp-sapphire), var(--ctp-sky));\n}\n\n.sidebar-cwd {\n    margin-bottom: 15px;\n}\n\n\n\n.file-tree-icon svg {\n    width: 16px;\n    height: 16px;\n}\n\n.file-tree-folder > .file-tree-icon svg {\n    color: var(--ctp-yellow);\n}\n\n.file-tree-item:not(.file-tree-folder) > .file-tree-icon svg {\n    color: var(--ctp-blue);\n}\n\n/* Add a small arrow for folders */\n.file-tree-folder > .file-tree-name::before {\n    content: '\u25b6';\n    display: inline-block;\n    margin-right: 5px;\n    font-size: 10px;\n    transition: transform 0.2s;\n}\n\n.file-tree-folder.expanded > .file-tree-name::before {\n    transform: rotate(90deg);\n}\n\n\n.file-tree-item {\n    margin-bottom: 2px;\n}\n\n.file-tree-item-content {\n    display: flex;\n    align-items: center;\n    cursor: pointer;\n    padding: 4px 0;\n}\n\n.file-tree-icon {\n    margin-right: 5px;\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n}\n\n.file-tree-name {\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n}\n\n.file-tree-children {\n    margin-left: 0;\n}\n\n.file-tree-item.expanded > .file-tree-item-content > .file-tree-icon svg {\n    transform: rotate(90deg);\n}\n\n#sidebar {\n    width: 250px;\n    min-width: 200px;\n    max-width: 30%;\n    background-color: var(--ctp-surface0);\n    display: flex;\n    flex-direction: column;\n    border-right: 1px solid var(--ctp-surface1);\n    height: 100vh;\n}\n\n#directory-browser {\n    flex-grow: 1;\n    overflow-y: auto;\n    padding: 15px;\n}\n\n#sidebar-footer {\n    padding: 26px;\n}\n\n.btn-browse {\n    width: 100%;\n    text-align: left;\n    padding: 4px 8px;\n    background: linear-gradient(to right, var(--ctp-blue), var(--ctp-sapphire));\n    color: var(--ctp-base);\n    border: none;\n    border-radius: 4px;\n    cursor: pointer;\n    transition: background 0.3s ease;\n    display: flex;\n    align-items: center;\n}\n\n.btn-browse:hover {\n    background: linear-gradient(to right, var(--ctp-sapphire), var(--ctp-sky));\n}\n\n.btn-browse .icon {\n    margin-right: 8px;\n}\n\n#command-palette {\n    position: fixed;\n    top: 20%;\n    left: 50%;\n    transform: translateX(-50%);\n    width: 500px;\n    max-width: 90%;\n    background-color: var(--ctp-surface0);\n    border-radius: 8px;\n    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n    z-index: 1000;\n}\n\n#command-palette.hidden {\n    display: none;\n}\n\n#command-input {\n    width: 100%;\n    padding: 12px 16px;\n    font-size: 16px;\n    border: none;\n    border-radius: 8px 8px 8px 8px;\n    background-color: var(--ctp-surface1);\n    color: var(--ctp-text);\n}\n\n#command-list {\n    max-height: 300px;\n    overflow-y: auto;\n    margin: 0;\n    padding: 0;\n    list-style-type: none;\n    background-color: transparent !important;\n    display: none;\n}\n\n\n#command-list li {\n    padding: 8px 16px;\n    cursor: pointer;\n}\n\n\n@keyframes fadeIn {\n    from { opacity: 0; }\n    to { opacity: 1; }\n}\n\n#command-palette {\n    animation: fadeIn 0.2s ease-out;\n}\n\n.model-selector {\n    position: relative;\n    display: inline-block;\n}\n\n.model-menu-trigger {\n    background-color: transparent;\n    border: none;\n    cursor: pointer;\n    padding: 8px;\n    border-radius: 4px;\n    transition: background-color 0.3s;\n}\n\n.model-menu-trigger:hover {\n    background-color: var(--ctp-surface1);\n}\n\n.model-menu-trigger svg {\n    width: 24px;\n    height: 24px;\n    stroke: var(--ctp-text);\n}\n\n.model-menu {\n    position: absolute;\n    bottom: 100%;\n    right: 0;\n    background-color: var(--ctp-surface0);\n    color: var(--ctp-text);\n    min-width: 160px;\n    box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);\n    z-index: 1;\n    border-radius: 4px;\n}\n\n.model-menu.hidden {\n    display: none;\n}\n\n.model-option {\n    color: var(--ctp-text);\n    padding: 12px 16px;\n    text-decoration: none;\n    display: block;\n    background: none;\n    border: none;\n    width: 100%;\n    text-align: left;\n    cursor: pointer;\n}\n\n.model-option:hover {\n    background: var(--ctp-surface1);\n}\n\n\n#git-status-bar {\n    display: flex;\n    align-items: center;\n    padding: 0 10px;\n    font-size: 12px;\n    background-color: var(--ctp-surface0);\n    color: var(--ctp-teal);\n}\n\n#git-status-bar > span {\n    margin-right: 15px;\n}\n\n#git-status-bar svg {\n    width: 14px;\n    height: 14px;\n    margin-right: 5px;\n    vertical-align: middle;\n}\n\n\n.icon-button {\n    background: none;\n    border: none;\n    cursor: pointer;\n    padding: 5px;\n    border-radius: 50%;\n    transition: background-color 0.3s;\n}\n.icon-button:hover {\n    background-color: rgba(255, 255, 255, 0.1);\n}\n.icon-button svg {\n    width: 24px;\n    height: 24px;\n    color: #cdd6f4;  /* Adjust color to match your theme */\n}\n\n.popup {\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(30, 30, 46, 0.8); /* Slightly transparent ctp-base */\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\n.popup-content {\n    background-color: var(--ctp-surface0);\n    padding: 30px;\n    border-radius: 8px;\n    text-align: center;\n    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n    max-width: 400px;\n    width: 100%;\n}\n\n.popup-content h2 {\n    color: var(--ctp-text);\n    margin-top: 0;\n    margin-bottom: 20px;\n    font-size: 24px;\n}\n\n#commit-message {\n    width: 100%;\n    margin-bottom: 20px;\n    padding: 10px;\n    border: 1px solid var(--ctp-surface1);\n    background-color: var(--ctp-base);\n    color: var(--ctp-text);\n    border-radius: 4px;\n    font-size: 14px;\n    resize: vertical;\n    min-height: 60px;\n}\n\n#commit-message:focus {\n    outline: none;\n    border-color: var(--ctp-blue);\n}\n\n.popup-buttons {\n    display: flex;\n    justify-content: center;\n    gap: 10px;\n}\n\n.popup-button {\n    padding: 8px 16px;\n    border: none;\n    border-radius: 4px;\n    cursor: pointer;\n    font-size: 14px;\n    transition: background-color 0.3s ease;\n}\n\n.popup-button.push {\n    background-color: var(--ctp-green);\n    color: var(--ctp-base);\n}\n\n.popup-button.push:hover {\n    background-color: var(--ctp-teal);\n}\n\n.popup-button.cancel {\n    background-color: var(--ctp-surface1);\n    color: var(--ctp-text);\n}\n\n.popup-button.cancel:hover {\n    background-color: var(--ctp-surface2);\n}\n\n.hidden {\n    display: none !important;\n}\n\n\n\n/* Catppuccin Mocha specific classes */\n.ctp-rosewater { color: var(--ctp-rosewater); }\n.ctp-flamingo { color: var(--ctp-flamingo); }\n.ctp-pink { color: var(--ctp-pink); }\n.ctp-mauve { color: var(--ctp-mauve); }\n.ctp-red { color: var(--ctp-red); }\n.ctp-maroon { color: var(--ctp-maroon); }\n.ctp-peach { color: var(--ctp-peach); }\n.ctp-yellow { color: var(--ctp-yellow); }\n.ctp-green { color: var(--ctp-green); }\n.ctp-teal { color: var(--ctp-teal); }\n.ctp-sky { color: var(--ctp-sky); }\n.ctp-sapphire { color: var(--ctp-sapphire); }\n.ctp-blue { color: var(--ctp-blue); }\n.ctp-lavender { color: var(--ctp-lavender); }\n\n.ctp-text { color: var(--ctp-text); }\n.ctp-subtext1 { color: var(--ctp-subtext1); }\n.ctp-subtext0 { color: var(--ctp-subtext0); }\n\n.ctp-overlay2 { background-color: var(--ctp-overlay2); }\n.ctp-overlay1 { background-color: var(--ctp-overlay1); }\n.ctp-overlay0 { background-color: var(--ctp-overlay0); }\n.ctp-surface2 { background-color: var(--ctp-surface2); }\n.ctp-surface1 { background-color: var(--ctp-surface1); }\n.ctp-surface0 { background-color: var(--ctp-surface0); }\n.ctp-base { background-color: var(--ctp-base); }\n.ctp-mantle { background-color: var(--ctp-mantle); }\n.ctp-crust { background-color: var(--ctp-crust); }\n\nContents of app.py:\nfrom flask import Flask, render_template, request, jsonify, session\nfrom flask_socketio import SocketIO, emit\nfrom datetime import timedelta\nimport os\nimport subprocess\nimport tempfile\nfrom openai import OpenAI\nimport markdown\nimport psutil\nimport pty\nimport select\nimport termios\nimport struct\nimport fcntl\nimport logging\nimport re\nimport json\nimport shutil\n\nimport anthropic\nfrom flask import send_from_directory\n\n\n\n\napp = Flask(__name__)\napp.secret_key = 'your_secret_key_here'  # Replace with a real secret key\n\napp.config['SESSION_TYPE'] = 'filesystem'\napp.config['SESSION_PERMANENT'] = False\n\napi_key_anthropic = os.environ.get(\"ANTHROPIC\")\nclient_anthropic = anthropic.Anthropic(\n    api_key=api_key_anthropic,\n)\n\n\n\n\nsocketio = SocketIO(app)\n# Configure OpenAI API\nclient = OpenAI(                                                                                               \n        base_url=\"https://openrouter.ai/api/v1\",                                                                   \n        api_key=os.environ.get(\"OPEN_ROUTER_KEY\"),                                                                                           \n    )  \n\n\nSESSION_DIR = os.path.join(os.path.dirname(os.path.abspath(__file__)), '.editor_session')\nos.makedirs(SESSION_DIR, exist_ok=True)\nSESSION_FILE = os.path.join(SESSION_DIR, 'session_state.json')\n\nCHAT_SESSION_DIR = os.path.join(os.path.dirname(os.path.abspath(__file__)), '.editor_session')\nCHAT_SESSION_FILE = os.path.join(CHAT_SESSION_DIR, '.chat_session.json')\n\n\ndef load_chat_session():\n    if os.path.exists(CHAT_SESSION_FILE):\n        with open(CHAT_SESSION_FILE, 'r') as f:\n            return json.load(f)\n    return {\"conversation_history\": [], \"tagged_file_contents\": {}}\n\ndef save_chat_session(chat_session):\n    with open(CHAT_SESSION_FILE, 'w') as f:\n        json.dump(chat_session, f, indent=2)\n\n\ndef load_session_state():\n    try:\n        if os.path.exists(SESSION_FILE) and os.path.getsize(SESSION_FILE) > 0:\n            with open(SESSION_FILE, 'r') as f:\n                return json.load(f)\n    except json.JSONDecodeError:\n        print(f\"Error decoding JSON from {SESSION_FILE}. Using default state.\")\n    except Exception as e:\n        print(f\"Error loading session state: {str(e)}. Using default state.\")\n    \n    return {\"selected_directory\": os.getcwd()}\n\ndef save_session_state(state):\n    try:\n        with open(SESSION_FILE, 'w') as f:\n            json.dump(state, f, indent=2)\n    except Exception as e:\n        print(f\"Error saving session state: {str(e)}\")\n\n\n\n@app.route('/')\ndef index():\n    return render_template('index.html')\n\n\n\n@app.route('/browse_directory', methods=['GET'])\ndef browse_directory():\n\n    directory = os.getcwd()\n\n\n    if directory:\n        try:\n            items = os.listdir(directory)\n            directories = [d for d in items if os.path.isdir(os.path.join(directory, d))]\n            files = [f for f in items if os.path.isfile(os.path.join(directory, f))]\n            session['current_directory'] = os.path.abspath(directory)  # Use absolute path\n            print('current_directory')\n            print(session['current_directory'])\n\n\n            session_state = load_session_state()\n            print(\"session_state\")\n            print(session_state)\n            session_state[\"selected_directory\"] = os.path.abspath(directory)\n            save_session_state(session_state)\n\n\n            return jsonify({\n                \"status\": \"success\",\n                \"current_path\": session['current_directory'],\n                \"directories\": directories,\n                \"files\": files\n            })\n        except Exception as e:\n            return jsonify({\"status\": \"error\", \"message\": str(e)})\n    else:\n        return jsonify({\"status\": \"cancelled\"})\n\n\n@app.route('/manifest.json')\ndef manifest():\n    return send_from_directory('static', 'manifest.json')\n\n@app.route('/service-worker.js')\ndef service_worker():\n    return send_from_directory('static', 'service-worker.js')\n\n\n@app.route('/file/<path:filepath>')\ndef get_file_content(filepath):\n    try:\n        session_state = load_session_state()\n        current_directory = session_state.get(\"selected_directory\", os.getcwd())\n        full_path = '/'+filepath     \n        # Ensure the requested file is within the current directory\n        if not os.path.abspath(full_path).startswith(os.path.abspath(current_directory)):\n            return jsonify({\"status\": \"error\", \"message\": \"Access denied\"})\n        \n        if os.path.isfile(full_path):\n            with open(full_path, 'r') as file:\n                content = file.read()\n            return jsonify({\"status\": \"success\", \"content\": content})\n        else:\n            return jsonify({\"status\": \"error\", \"message\": \"File not found\"})\n    except Exception as e:\n        return jsonify({\"status\": \"error\", \"message\": str(e)})\n\n\n\n\n@app.route('/select_directory', methods=['POST'])\ndef select_directory():\n    directory = request.json['directory']\n    if os.path.isdir(directory):\n        session['current_directory'] = directory\n        return jsonify({\"status\": \"success\", \"directory\": directory})\n    else:\n        return jsonify({\"status\": \"error\", \"message\": \"Invalid directory\"})\n\n@app.route('/files')\ndef get_files():\n    directory = session.get('current_directory', '')\n    if not directory:\n        return jsonify({\"status\": \"error\", \"message\": \"No directory selected\"})\n    \n    files = [f for f in os.listdir(directory) if os.path.isfile(os.path.join(directory, f))]\n    return jsonify({\"status\": \"success\", \"files\": files})\n\n\n\n\n\ndef create_directory_structure(path):\n    structure = {\"name\": os.path.basename(path), \"type\": \"directory\", \"path\": path, \"children\": []}\n\n    try:\n        with os.scandir(path) as entries:\n            for entry in entries:\n                if entry.is_dir():\n                    structure[\"children\"].append(create_directory_structure(entry.path))\n                else:\n                    structure[\"children\"].append({\n                        \"name\": entry.name,\n                        \"type\": \"file\",\n                        \"path\": entry.path\n                    })\n    except PermissionError:\n        structure[\"children\"].append({\"name\": \"Permission Denied\", \"type\": \"error\"})\n    return structure\n\n\n@app.route('/get_directory_structure')\ndef get_directory_structure():\n    try:\n        print(\"get director structure\")\n\n        session_state = load_session_state()\n        current_directory = session_state.get(\"selected_directory\", os.getcwd())\n\n        print(current_directory)\n\n        structure = create_directory_structure(current_directory)\n        return jsonify({\n            \"status\": \"success\",\n            \"current_directory\": current_directory,\n            \"structure\": structure\n        })\n    except Exception as e:\n        return jsonify({\"status\": \"error\", \"message\": str(e)})\n\n\n@app.route('/save', methods=['POST'])\ndef save_file():\n    data = request.json\n    filename = data['filename']\n    content = data['content']\n    directory = session.get('current_directory', '')\n    if not directory:\n        return jsonify({\"status\": \"error\", \"message\": \"No directory selected\"})\n    \n    file_path = os.path.join(directory, filename)\n    try:\n        with open(file_path, 'w') as file:\n            file.write(content)\n        return jsonify({\"status\": \"success\"})\n    except Exception as e:\n        return jsonify({\"status\": \"error\", \"message\": str(e)})\n\n@app.route('/run', methods=['POST'])\ndef run_code():\n    data = request.json\n    filename = data['filename']\n    user_input = data.get('input', '')\n    directory = session.get('current_directory', '')\n    if not directory:\n        return jsonify({\"status\": \"error\", \"message\": \"No directory selected\"})\n    \n    file_path = os.path.join(directory, filename)\n    \n    if filename.endswith('.cpp'):\n        with tempfile.NamedTemporaryFile(suffix='.exe', delete=False) as temp_exe:\n            executable = temp_exe.name\n        \n        compile_command = f\"g++ {file_path} -o {executable}\"\n        compile_process = subprocess.run(compile_command, shell=True, capture_output=True, text=True)\n        \n        if compile_process.returncode != 0:\n            return jsonify({\"status\": \"error\", \"output\": f\"Compilation error:\\n{compile_process.stderr}\"})\n        \n        try:\n            run_process = subprocess.run(executable, input=user_input, shell=True, capture_output=True, text=True, timeout=5)\n            output = run_process.stdout\n            error = run_process.stderr\n            \n            if run_process.returncode != 0:\n                return jsonify({\"status\": \"error\", \"output\": f\"Runtime error:\\n{error}\"})\n            \n            return jsonify({\"status\": \"success\", \"output\": output or \"Program ran successfully, but produced no output.\"})\n        except subprocess.TimeoutExpired:\n            return jsonify({\"status\": \"error\", \"output\": \"Program execution timed out after 5 seconds.\"})\n        except Exception as e:\n            return jsonify({\"status\": \"error\", \"output\": f\"An error occurred: {str(e)}\"})\n        finally:\n            os.remove(executable)\n\n    elif filename.endswith('.py'):\n    # Run Python code\n        try:\n            run_process = subprocess.run(['python', file_path], input=user_input, text=True, capture_output=True, timeout=5)\n            output = run_process.stdout\n            error = run_process.stderr\n\n            if run_process.returncode != 0:\n                return jsonify({\"status\": \"error\", \"output\": f\"Runtime error:\\n{error}\"})\n\n            return jsonify({\"status\": \"success\", \"output\": output or \"Program ran successfully, but produced no output.\"})\n        except subprocess.TimeoutExpired:\n            return jsonify({\"status\": \"error\", \"output\": \"Program execution timed out after 5 seconds.\"})\n        except Exception as e:\n            return jsonify({\"status\": \"error\", \"output\": f\"An error occurred: {str(e)}\"})\n\n\n\n@app.route('/chat', methods=['POST'])\ndef chat():\n    data = request.json\n    code = data['code']\n    user_message = data['message']\n    tagged_files = data.get('taggedFiles', [])\n    model = data.get('model', 'openai/gpt-4o-mini')  # Default to GPT-4o-mini if not specified\n    print(model)\n    \n    # Load the current chat session\n    chat_session = load_chat_session()\n    \n    # Fetch content of newly tagged files and add to existing tagged files\n    session_state = load_session_state()\n    current_directory = session_state.get(\"selected_directory\", os.getcwd())\n    for file_path in tagged_files:\n        if file_path not in chat_session['tagged_file_contents']:\n            full_path = os.path.join(current_directory, file_path)\n            if os.path.isfile(full_path):\n                with open(full_path, 'r') as file:\n                    chat_session['tagged_file_contents'][file_path] = file.read()\n            else:\n                chat_session['tagged_file_contents'][file_path] = f\"File not found: {file_path}\"\n    \n    # Prepare the prompt with all tagged file contents\n    prompt = f\"User's question: {user_message}\\n\\n\"\n    prompt += f\"Current file contents:\\n{code}\\n\\n\"\n    for file_path, content in chat_session['tagged_file_contents'].items():\n        prompt += f\"Contents of {file_path}:\\n{content}\\n\\n\"\n    \n    # Add the new prompt to the conversation history\n    chat_session['conversation_history'].append({\"role\": \"user\", \"content\": prompt})\n    print(\"Current conversation history:\")\n    print(chat_session['conversation_history'])\n    \n    # Prepare the messages for the API call\n    messages = [\n        {\"role\": \"system\", \"content\": \"You are a helpful coding assistant. The user will provide you with code and questions about it. Always give your response in markdown format. It should be always markdown, remember that.\"},\n    ] + chat_session['conversation_history']\n    \n    try:\n        if model == \"anthropic/claude-3.5-sonnet\":\n            response = client_anthropic.messages.create(\n                model=\"claude-3-sonnet-20240229\",\n                temperature=0,\n                max_tokens = 4096,\n                system=\"You are a helpful coding assistant. The user will provide you with code and questions about it. Always return your output in markdown so that i can correctly render it.\",\n                messages=chat_session['conversation_history']\n            )\n        else:\n            response = client.chat.completions.create(\n                model=model,\n                messages=messages\n            )\n\n        ai_response = \"\"\n\n        if model == \"anthropic/claude-3.5-sonnet\":\n            ai_response = response.content[0].text\n        else:\n            ai_response = response.choices[0].message.content\n        \n        # Add the AI's response to the conversation history\n        chat_session['conversation_history'].append({\"role\": \"assistant\", \"content\": ai_response})\n        \n        # Limit the conversation history to the last 10 messages (5 exchanges)\n        if len(chat_session['conversation_history']) > 10:\n            chat_session['conversation_history'] = chat_session['conversation_history'][-10:]\n        \n        # Save the updated chat session\n        save_chat_session(chat_session)\n        \n        return jsonify({\"status\": \"success\", \"response\": ai_response})\n    except Exception as e:\n        print(\"Error:\", str(e))\n        return jsonify({\"status\": \"error\", \"message\": str(e)})\n\n# Add this route to clear the chat session\n@app.route('/clear_chat_session', methods=['POST'])\ndef clear_chat_session():\n    if os.path.exists(CHAT_SESSION_FILE):\n        os.remove(CHAT_SESSION_FILE)\n    return jsonify({\"status\": \"success\", \"message\": \"Chat session cleared\"})\n\n# Call this function when your Flask app starts\ndef initialize_chat_session():\n    if not os.path.exists(CHAT_SESSION_FILE):\n        save_chat_session({\"conversation_history\": [], \"tagged_file_contents\": {}})\n\n\n\n@app.route('/ai_suggestion', methods=['POST'])\ndef ai_suggestion():\n    data = request.json\n    prompt = data['prompt']\n    selected_code = data['code']\n    \n    try:\n        # Prepare the messages for the API call\n        messages = [\n            {\"role\": \"system\", \"content\": \"You are an AI coding assistant. Provide code suggestions based on the given prompt and selected code. Only return the suggested code, without any explanations or markdown formatting.\"},\n            {\"role\": \"user\", \"content\": f\"Prompt: {prompt}\\n\\nSelected Code:\\n{selected_code}\"}\n        ]\n        \n        response = client.chat.completions.create(\n            model=\"openai/gpt-4o-mini\",  # You can change this to the desired model\n            messages=messages\n        )\n        \n        ai_suggestion = response.choices[0].message.content.strip()\n        \n        return jsonify({\"status\": \"success\", \"suggestion\": ai_suggestion})\n    except Exception as e:\n        print(\"Error:\", str(e))\n        return jsonify({\"status\": \"error\", \"message\": str(e)})\n\n\n\n\ndef get_current_directory():\n    return session.get('current_directory', os.getcwd())\n\n\n\n@app.route('/hardware_stats')\ndef hardware_stats():\n    cpu_usage = psutil.cpu_percent()\n    memory = psutil.virtual_memory()\n    disk = psutil.disk_usage('/')\n\n    stats = {\n        'cpu_usage': round(cpu_usage, 1),\n        'memory_used': round(memory.used / (1024**3), 1),\n        'memory_total': round(memory.total / (1024**3), 1),\n        'disk_used': round(disk.used / (1024**3), 1),\n        'disk_total': round(disk.total / (1024**3), 1)\n    }\n    \n    logging.info(f\"Hardware stats: {stats}\")\n    return jsonify(stats)\n\n\n\n@socketio.on('connect', namespace='/terminal')\ndef terminal_connect():\n    print('Client connected to terminal')\n\n@socketio.on('disconnect', namespace='/terminal')\ndef terminal_disconnect():\n    print('Client disconnected from terminal')\n\n@socketio.on('command', namespace='/terminal')\ndef handle_command(command):\n    print(f'Received command: {command}')\n    try:\n        # Execute the command\n        result = subprocess.run(command, shell=True, capture_output=True, text=True, timeout=10)\n        output = result.stdout + result.stderr\n        if not output:\n            output = f\"Command executed: {command}\\n\"\n    except subprocess.TimeoutExpired:\n        output = \"Command execution timed out\\n\"\n    except Exception as e:\n        output = f\"Error executing command: {str(e)}\\n\"\n    \n    emit('output', output)\n\n\n\n\nimport html\n\n@app.route('/git_diff', methods=['POST'])\ndef git_diff():\n    try:\n        directory = session.get('current_directory', '')\n        if not directory:\n            return jsonify({\"status\": \"error\", \"message\": \"No directory selected\"})\n        \n        commit_hash = request.json.get('commit_hash', 'HEAD')\n        \n        result = subprocess.run(['git', 'diff', commit_hash],\n                                cwd=directory,\n                                capture_output=True,\n                                text=True,\n                                check=True)\n        \n        diff_lines = result.stdout.split('\\n')\n        processed_diff = []\n        current_file = \"\"\n        line_number_old = 0\n        line_number_new = 0\n        \n        for line in diff_lines:\n            # Escape HTML characters to prevent rendering\n            escaped_line = html.escape(line)\n            \n            if line.startswith('diff --git'):\n                if current_file:\n                    processed_diff.append('</table></div>')\n                current_file = line.split()[-1].split('/')[-1]\n                processed_diff.append(f'<div class=\"diff-file\"><h3>{html.escape(current_file)}</h3><table>')\n                line_number_old = 0\n                line_number_new = 0\n            elif line.startswith('+++') or line.startswith('---'):\n                processed_diff.append(f'<tr><td colspan=\"3\" class=\"diff-header\">{escaped_line}</td></tr>')\n            elif line.startswith('@@'):\n                match = re.match(r'@@ -(\\d+),\\d+ \\+(\\d+),\\d+ @@', line)\n                if match:\n                    line_number_old = int(match.group(1))\n                    line_number_new = int(match.group(2))\n                processed_diff.append(f'<tr><td colspan=\"3\" class=\"diff-header\">{escaped_line}</td></tr>')\n            else:\n                if line.startswith('+'):\n                    processed_diff.append(f'<tr class=\"diff-added\"><td></td><td>{line_number_new}</td><td>{escaped_line}</td></tr>')\n                    line_number_new += 1\n                elif line.startswith('-'):\n                    processed_diff.append(f'<tr class=\"diff-removed\"><td>{line_number_old}</td><td></td><td>{escaped_line}</td></tr>')\n                    line_number_old += 1\n                else:\n                    processed_diff.append(f'<tr><td>{line_number_old}</td><td>{line_number_new}</td><td>{escaped_line}</td></tr>')\n                    line_number_old += 1\n                    line_number_new += 1\n        \n        if current_file:\n            processed_diff.append('</table></div>')\n        \n        html_diff = '\\n'.join(processed_diff)\n        \n        return jsonify({\"status\": \"success\", \"diff\": html_diff})\n    except subprocess.CalledProcessError as e:\n        return jsonify({\"status\": \"error\", \"message\": f\"Git diff failed: {e.stderr}\"})\n    except Exception as e:\n        return jsonify({\"status\": \"error\", \"message\": str(e)})\n\n\n\n\n\n@app.route('/git_info')\ndef get_git_info():\n    try:\n        directory = session.get('current_directory', '')\n        if not directory:\n            return jsonify({\"status\": \"error\", \"message\": \"No directory selected\"})\n\n        # Get current branch\n        branch = subprocess.check_output(['git', 'rev-parse', '--abbrev-ref', 'HEAD'], \n                                         cwd=directory, text=True).strip()\n\n        # Get commit hash\n        commit_hash = subprocess.check_output(['git', 'rev-parse', '--short', 'HEAD'], \n                                              cwd=directory, text=True).strip()\n\n        # Get number of modified files\n        status_output = subprocess.check_output(['git', 'status', '--porcelain'], \n                                                cwd=directory, text=True)\n        modified_files = len(status_output.splitlines())\n\n        # Get number of unpushed commits\n        unpushed = subprocess.check_output(['git', 'log', '@{u}..'], \n                                           cwd=directory, text=True)\n        unpushed_commits = len(unpushed.splitlines()) // 6  # Divide by 6 as each commit has 6 lines in the log\n\n        return jsonify({\n            \"status\": \"success\",\n            \"branch\": branch,\n            \"commit\": commit_hash,\n            \"modified_files\": modified_files,\n            \"unpushed_commits\": unpushed_commits\n        })\n    except subprocess.CalledProcessError as e:\n        return jsonify({\"status\": \"error\", \"message\": f\"Git command failed: {str(e)}\"})\n    except Exception as e:\n        return jsonify({\"status\": \"error\", \"message\": str(e)})\n\n\n\n@app.route('/get_commits', methods=['GET'])\ndef get_commits():\n    try:\n        directory = session.get('current_directory', '')\n        if not directory:\n            return jsonify({\"status\": \"error\", \"message\": \"No directory selected\"})\n        \n        result = subprocess.run(['git', 'log', '--pretty=format:%H|%s', '-n', '50'],\n                                cwd=directory,\n                                capture_output=True,\n                                text=True,\n                                check=True)\n        \n        commits = [{'hash': line.split('|')[0], 'message': line.split('|')[1]} \n                   for line in result.stdout.split('\\n') if line]\n        \n        return jsonify({\"status\": \"success\", \"commits\": commits})\n    except subprocess.CalledProcessError as e:\n        return jsonify({\"status\": \"error\", \"message\": f\"Failed to get commits: {e.stderr}\"})\n    except Exception as e:\n        return jsonify({\"status\": \"error\", \"message\": str(e)})\n\n\n\n\n\n\n\n@app.route('/add_file', methods=['POST'])\ndef add_file():\n    data = request.json\n    file_path = data.get('file_path')\n    \n    if not file_path:\n        return jsonify({\"status\": \"error\", \"message\": \"File path is required\"})\n    \n    try:\n        session_state = load_session_state()\n        current_directory = session_state.get(\"selected_directory\", os.getcwd())\n        full_path = os.path.join(current_directory, file_path)\n        \n        # Create any necessary directories\n        os.makedirs(os.path.dirname(full_path), exist_ok=True)\n        \n        # Create the file\n        with open(full_path, 'w') as f:\n            pass  # Create an empty file\n        \n        return jsonify({\"status\": \"success\", \"message\": f\"File created: {file_path}\"})\n    except Exception as e:\n        return jsonify({\"status\": \"error\", \"message\": str(e)})\n\n@app.route('/rename_file', methods=['POST'])\ndef rename_file():\n    data = request.json\n    old_path = data.get('old_path')\n    new_path = data.get('new_path')\n    \n    if not old_path or not new_path:\n        return jsonify({\"status\": \"error\", \"message\": \"Both old and new file paths are required\"})\n    \n    try:\n        session_state = load_session_state()\n        current_directory = session_state.get(\"selected_directory\", os.getcwd())\n        full_old_path = os.path.join(current_directory, old_path)\n        full_new_path = os.path.join(current_directory, new_path)\n        \n        if os.path.isfile(full_old_path):\n            os.rename(full_old_path, full_new_path)\n            return jsonify({\"status\": \"success\", \"message\": f\"File renamed from {old_path} to {new_path}\"})\n        else:\n            return jsonify({\"status\": \"error\", \"message\": f\"File not found: {old_path}\"})\n    except Exception as e:\n        return jsonify({\"status\": \"error\", \"message\": str(e)})\n\n@app.route('/delete_file', methods=['POST'])\ndef delete_file():\n    data = request.json\n    file_path = data.get('file_path')\n    \n    if not file_path:\n        return jsonify({\"status\": \"error\", \"message\": \"File path is required\"})\n    \n    try:\n        session_state = load_session_state()\n        current_directory = session_state.get(\"selected_directory\", os.getcwd())\n        full_path = os.path.join(current_directory, file_path)\n        \n        if os.path.isfile(full_path):\n            os.remove(full_path)\n            return jsonify({\"status\": \"success\", \"message\": f\"File deleted: {file_path}\"})\n        else:\n            return jsonify({\"status\": \"error\", \"message\": f\"File not found: {file_path}\"})\n    except Exception as e:\n        return jsonify({\"status\": \"error\", \"message\": str(e)})\n\n\n\n\n\n\n\n@app.route('/add_folder', methods=['POST'])\ndef add_folder():\n    data = request.json\n    folder_path = data.get('folder_path')\n    \n    if not folder_path:\n        return jsonify({\"status\": \"error\", \"message\": \"Folder path is required\"})\n    \n    try:\n        session_state = load_session_state()\n        current_directory = session_state.get(\"selected_directory\", os.getcwd())\n        full_path = os.path.join(current_directory, folder_path)\n        \n        os.makedirs(full_path, exist_ok=True)\n        \n        return jsonify({\"status\": \"success\", \"message\": f\"Folder created: {folder_path}\"})\n    except Exception as e:\n        return jsonify({\"status\": \"error\", \"message\": str(e)})\n\n@app.route('/delete_folder', methods=['POST'])\ndef delete_folder():\n    data = request.json\n    folder_path = data.get('folder_path')\n    \n    if not folder_path:\n        return jsonify({\"status\": \"error\", \"message\": \"Folder path is required\"})\n    \n    try:\n        session_state = load_session_state()\n        current_directory = session_state.get(\"selected_directory\", os.getcwd())\n        full_path = os.path.join(current_directory, folder_path)\n        \n        if os.path.isdir(full_path):\n            shutil.rmtree(full_path)\n            return jsonify({\"status\": \"success\", \"message\": f\"Folder deleted: {folder_path}\"})\n        else:\n            return jsonify({\"status\": \"error\", \"message\": f\"Folder not found: {folder_path}\"})\n    except Exception as e:\n        return jsonify({\"status\": \"error\", \"message\": str(e)})\n\n@app.route('/rename_folder', methods=['POST'])\ndef rename_folder():\n    data = request.json\n    old_path = data.get('old_path')\n    new_path = data.get('new_path')\n    \n    if not old_path or not new_path:\n        return jsonify({\"status\": \"error\", \"message\": \"Both old and new folder paths are required\"})\n    \n    try:\n        session_state = load_session_state()\n        current_directory = session_state.get(\"selected_directory\", os.getcwd())\n        full_old_path = os.path.join(current_directory, old_path)\n        full_new_path = os.path.join(current_directory, new_path)\n        \n        if os.path.isdir(full_old_path):\n            os.rename(full_old_path, full_new_path)\n            return jsonify({\"status\": \"success\", \"message\": f\"Folder renamed from {old_path} to {new_path}\"})\n        else:\n            return jsonify({\"status\": \"error\", \"message\": f\"Folder not found: {old_path}\"})\n    except Exception as e:\n        return jsonify({\"status\": \"error\", \"message\": str(e)})\n\n\n\n\n\ninitialize_chat_session()\n\n\n@app.route('/git_push', methods=['POST'])\ndef git_push():\n    try:\n        data = request.json\n        commit_message = data['commit_message']\n        \n        # Get the current directory\n        current_directory = session.get('current_directory', os.getcwd())\n        \n        # Execute Git commands\n        subprocess.run(['git', 'add', '.'], cwd=current_directory, check=True)\n        subprocess.run(['git', 'commit', '-m', commit_message], cwd=current_directory, check=True)\n        \n        # Get the current branch name\n        branch = subprocess.check_output(['git', 'rev-parse', '--abbrev-ref', 'HEAD'], \n                                         cwd=current_directory, text=True).strip()\n        \n        # Push to the current branch\n        subprocess.run(['git', 'push', 'origin', branch], cwd=current_directory, check=True)\n        \n        return jsonify({\"status\": \"success\", \"message\": \"Git push completed successfully\"})\n    except subprocess.CalledProcessError as e:\n        return jsonify({\"status\": \"error\", \"message\": f\"Git command failed: {str(e)}\"})\n    except Exception as e:\n        return jsonify({\"status\": \"error\", \"message\": str(e)})\n\nif __name__ == '__main__':\n    socketio.run(app, debug = True, port = 5000)\n\n"
    },
    {
      "role": "assistant",
      "content": "To write a Flask-SocketIO function that finds the available ports, you can utilize the following steps:\n\n1. **Import necessary libraries**: You'll need `socket` to help with checking available ports.\n2. **Define a function to find available ports**: This function can scan through a range of ports to determine which ones are open/available.\n3. **Create a socket event**: Use Flask-SocketIO to create a socket event that will execute the port scanning function and send the available ports back to the client.\n\nHere\u2019s how you could implement it:\n\n### Example Code to Find Available Ports\n\nAdd this function and corresponding socket event to your `app.py` file:\n\n```python\nimport socket\n\ndef find_available_ports(start_port=5000, end_port=6000):\n    available_ports = []\n    for port in range(start_port, end_port + 1):\n        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:\n            result = sock.connect_ex(('localhost', port))\n            if result != 0:  # If the result is not equal to 0, the port is available\n                available_ports.append(port)\n    return available_ports\n\n@socketio.on('request_available_ports', namespace='/ports')\ndef handle_request_available_ports():\n    available_ports = find_available_ports()\n    emit('available_ports', {'ports': available_ports})\n```\n\n### Explanation:\n\n- **`find_available_ports` Function**: This function checks ports from `start_port` to `end_port`. It attempts to connect to each port using a socket. If the connection attempt fails (returns a non-zero result), it means the port is available and therefore adds it to the `available_ports` list.\n- **Socket Event `request_available_ports`**: This event listens for requests from clients and responds with a list of available ports by calling `find_available_ports()`.\n\n### How to Use in Client:\n\nIn your client-side JavaScript, you could emit a request to get available ports:\n\n```javascript\nsocket.emit('request_available_ports', null);\n```\n\nThen listen for the response:\n\n```javascript\nsocket.on('available_ports', (data) => {\n    console.log('Available Ports:', data.ports);\n});\n```\n\n### Complete Integration:\n\nMake sure you place this new code in the appropriate section of your Flask app and ensure that the SocketIO instance is initialized properly.\n\nNow, whenever a client requests available ports, your Flask-SocketIO server will respond with a list of ports that are currently available for use."
    }
  ],
  "tagged_file_contents": {
    "app.py": "from flask import Flask, render_template, request, jsonify, session\nfrom flask_socketio import SocketIO, emit\nfrom datetime import timedelta\nimport os\nimport subprocess\nimport tempfile\nfrom openai import OpenAI\nimport markdown\nimport psutil\nimport pty\nimport select\nimport termios\nimport struct\nimport fcntl\nimport logging\nimport re\nimport json\nimport shutil\n\nimport anthropic\nfrom flask import send_from_directory\n\n\n\n\napp = Flask(__name__)\napp.secret_key = 'your_secret_key_here'  # Replace with a real secret key\n\napp.config['SESSION_TYPE'] = 'filesystem'\napp.config['SESSION_PERMANENT'] = False\n\napi_key_anthropic = os.environ.get(\"ANTHROPIC\")\nclient_anthropic = anthropic.Anthropic(\n    api_key=api_key_anthropic,\n)\n\n\n\n\nsocketio = SocketIO(app)\n# Configure OpenAI API\nclient = OpenAI(                                                                                               \n        base_url=\"https://openrouter.ai/api/v1\",                                                                   \n        api_key=os.environ.get(\"OPEN_ROUTER_KEY\"),                                                                                           \n    )  \n\n\nSESSION_DIR = os.path.join(os.path.dirname(os.path.abspath(__file__)), '.editor_session')\nos.makedirs(SESSION_DIR, exist_ok=True)\nSESSION_FILE = os.path.join(SESSION_DIR, 'session_state.json')\n\nCHAT_SESSION_DIR = os.path.join(os.path.dirname(os.path.abspath(__file__)), '.editor_session')\nCHAT_SESSION_FILE = os.path.join(CHAT_SESSION_DIR, '.chat_session.json')\n\n\ndef load_chat_session():\n    if os.path.exists(CHAT_SESSION_FILE):\n        with open(CHAT_SESSION_FILE, 'r') as f:\n            return json.load(f)\n    return {\"conversation_history\": [], \"tagged_file_contents\": {}}\n\ndef save_chat_session(chat_session):\n    with open(CHAT_SESSION_FILE, 'w') as f:\n        json.dump(chat_session, f, indent=2)\n\n\ndef load_session_state():\n    try:\n        if os.path.exists(SESSION_FILE) and os.path.getsize(SESSION_FILE) > 0:\n            with open(SESSION_FILE, 'r') as f:\n                return json.load(f)\n    except json.JSONDecodeError:\n        print(f\"Error decoding JSON from {SESSION_FILE}. Using default state.\")\n    except Exception as e:\n        print(f\"Error loading session state: {str(e)}. Using default state.\")\n    \n    return {\"selected_directory\": os.getcwd()}\n\ndef save_session_state(state):\n    try:\n        with open(SESSION_FILE, 'w') as f:\n            json.dump(state, f, indent=2)\n    except Exception as e:\n        print(f\"Error saving session state: {str(e)}\")\n\n\n\n@app.route('/')\ndef index():\n    return render_template('index.html')\n\n\n\n@app.route('/browse_directory', methods=['GET'])\ndef browse_directory():\n\n    directory = os.getcwd()\n\n\n    if directory:\n        try:\n            items = os.listdir(directory)\n            directories = [d for d in items if os.path.isdir(os.path.join(directory, d))]\n            files = [f for f in items if os.path.isfile(os.path.join(directory, f))]\n            session['current_directory'] = os.path.abspath(directory)  # Use absolute path\n            print('current_directory')\n            print(session['current_directory'])\n\n\n            session_state = load_session_state()\n            print(\"session_state\")\n            print(session_state)\n            session_state[\"selected_directory\"] = os.path.abspath(directory)\n            save_session_state(session_state)\n\n\n            return jsonify({\n                \"status\": \"success\",\n                \"current_path\": session['current_directory'],\n                \"directories\": directories,\n                \"files\": files\n            })\n        except Exception as e:\n            return jsonify({\"status\": \"error\", \"message\": str(e)})\n    else:\n        return jsonify({\"status\": \"cancelled\"})\n\n\n@app.route('/manifest.json')\ndef manifest():\n    return send_from_directory('static', 'manifest.json')\n\n@app.route('/service-worker.js')\ndef service_worker():\n    return send_from_directory('static', 'service-worker.js')\n\n\n@app.route('/file/<path:filepath>')\ndef get_file_content(filepath):\n    try:\n        session_state = load_session_state()\n        current_directory = session_state.get(\"selected_directory\", os.getcwd())\n        full_path = '/'+filepath     \n        # Ensure the requested file is within the current directory\n        if not os.path.abspath(full_path).startswith(os.path.abspath(current_directory)):\n            return jsonify({\"status\": \"error\", \"message\": \"Access denied\"})\n        \n        if os.path.isfile(full_path):\n            with open(full_path, 'r') as file:\n                content = file.read()\n            return jsonify({\"status\": \"success\", \"content\": content})\n        else:\n            return jsonify({\"status\": \"error\", \"message\": \"File not found\"})\n    except Exception as e:\n        return jsonify({\"status\": \"error\", \"message\": str(e)})\n\n\n\n\n@app.route('/select_directory', methods=['POST'])\ndef select_directory():\n    directory = request.json['directory']\n    if os.path.isdir(directory):\n        session['current_directory'] = directory\n        return jsonify({\"status\": \"success\", \"directory\": directory})\n    else:\n        return jsonify({\"status\": \"error\", \"message\": \"Invalid directory\"})\n\n@app.route('/files')\ndef get_files():\n    directory = session.get('current_directory', '')\n    if not directory:\n        return jsonify({\"status\": \"error\", \"message\": \"No directory selected\"})\n    \n    files = [f for f in os.listdir(directory) if os.path.isfile(os.path.join(directory, f))]\n    return jsonify({\"status\": \"success\", \"files\": files})\n\n\n\n\n\ndef create_directory_structure(path):\n    structure = {\"name\": os.path.basename(path), \"type\": \"directory\", \"path\": path, \"children\": []}\n\n    try:\n        with os.scandir(path) as entries:\n            for entry in entries:\n                if entry.is_dir():\n                    structure[\"children\"].append(create_directory_structure(entry.path))\n                else:\n                    structure[\"children\"].append({\n                        \"name\": entry.name,\n                        \"type\": \"file\",\n                        \"path\": entry.path\n                    })\n    except PermissionError:\n        structure[\"children\"].append({\"name\": \"Permission Denied\", \"type\": \"error\"})\n    return structure\n\n\n@app.route('/get_directory_structure')\ndef get_directory_structure():\n    try:\n        print(\"get director structure\")\n\n        session_state = load_session_state()\n        current_directory = session_state.get(\"selected_directory\", os.getcwd())\n\n        print(current_directory)\n\n        structure = create_directory_structure(current_directory)\n        return jsonify({\n            \"status\": \"success\",\n            \"current_directory\": current_directory,\n            \"structure\": structure\n        })\n    except Exception as e:\n        return jsonify({\"status\": \"error\", \"message\": str(e)})\n\n\n@app.route('/save', methods=['POST'])\ndef save_file():\n    data = request.json\n    filename = data['filename']\n    content = data['content']\n    directory = session.get('current_directory', '')\n    if not directory:\n        return jsonify({\"status\": \"error\", \"message\": \"No directory selected\"})\n    \n    file_path = os.path.join(directory, filename)\n    try:\n        with open(file_path, 'w') as file:\n            file.write(content)\n        return jsonify({\"status\": \"success\"})\n    except Exception as e:\n        return jsonify({\"status\": \"error\", \"message\": str(e)})\n\n@app.route('/run', methods=['POST'])\ndef run_code():\n    data = request.json\n    filename = data['filename']\n    user_input = data.get('input', '')\n    directory = session.get('current_directory', '')\n    if not directory:\n        return jsonify({\"status\": \"error\", \"message\": \"No directory selected\"})\n    \n    file_path = os.path.join(directory, filename)\n    \n    if filename.endswith('.cpp'):\n        with tempfile.NamedTemporaryFile(suffix='.exe', delete=False) as temp_exe:\n            executable = temp_exe.name\n        \n        compile_command = f\"g++ {file_path} -o {executable}\"\n        compile_process = subprocess.run(compile_command, shell=True, capture_output=True, text=True)\n        \n        if compile_process.returncode != 0:\n            return jsonify({\"status\": \"error\", \"output\": f\"Compilation error:\\n{compile_process.stderr}\"})\n        \n        try:\n            run_process = subprocess.run(executable, input=user_input, shell=True, capture_output=True, text=True, timeout=5)\n            output = run_process.stdout\n            error = run_process.stderr\n            \n            if run_process.returncode != 0:\n                return jsonify({\"status\": \"error\", \"output\": f\"Runtime error:\\n{error}\"})\n            \n            return jsonify({\"status\": \"success\", \"output\": output or \"Program ran successfully, but produced no output.\"})\n        except subprocess.TimeoutExpired:\n            return jsonify({\"status\": \"error\", \"output\": \"Program execution timed out after 5 seconds.\"})\n        except Exception as e:\n            return jsonify({\"status\": \"error\", \"output\": f\"An error occurred: {str(e)}\"})\n        finally:\n            os.remove(executable)\n\n    elif filename.endswith('.py'):\n    # Run Python code\n        try:\n            run_process = subprocess.run(['python', file_path], input=user_input, text=True, capture_output=True, timeout=5)\n            output = run_process.stdout\n            error = run_process.stderr\n\n            if run_process.returncode != 0:\n                return jsonify({\"status\": \"error\", \"output\": f\"Runtime error:\\n{error}\"})\n\n            return jsonify({\"status\": \"success\", \"output\": output or \"Program ran successfully, but produced no output.\"})\n        except subprocess.TimeoutExpired:\n            return jsonify({\"status\": \"error\", \"output\": \"Program execution timed out after 5 seconds.\"})\n        except Exception as e:\n            return jsonify({\"status\": \"error\", \"output\": f\"An error occurred: {str(e)}\"})\n\n\n\n@app.route('/chat', methods=['POST'])\ndef chat():\n    data = request.json\n    code = data['code']\n    user_message = data['message']\n    tagged_files = data.get('taggedFiles', [])\n    model = data.get('model', 'openai/gpt-4o-mini')  # Default to GPT-4o-mini if not specified\n    print(model)\n    \n    # Load the current chat session\n    chat_session = load_chat_session()\n    \n    # Fetch content of newly tagged files and add to existing tagged files\n    session_state = load_session_state()\n    current_directory = session_state.get(\"selected_directory\", os.getcwd())\n    for file_path in tagged_files:\n        if file_path not in chat_session['tagged_file_contents']:\n            full_path = os.path.join(current_directory, file_path)\n            if os.path.isfile(full_path):\n                with open(full_path, 'r') as file:\n                    chat_session['tagged_file_contents'][file_path] = file.read()\n            else:\n                chat_session['tagged_file_contents'][file_path] = f\"File not found: {file_path}\"\n    \n    # Prepare the prompt with all tagged file contents\n    prompt = f\"User's question: {user_message}\\n\\n\"\n    prompt += f\"Current file contents:\\n{code}\\n\\n\"\n    for file_path, content in chat_session['tagged_file_contents'].items():\n        prompt += f\"Contents of {file_path}:\\n{content}\\n\\n\"\n    \n    # Add the new prompt to the conversation history\n    chat_session['conversation_history'].append({\"role\": \"user\", \"content\": prompt})\n    print(\"Current conversation history:\")\n    print(chat_session['conversation_history'])\n    \n    # Prepare the messages for the API call\n    messages = [\n        {\"role\": \"system\", \"content\": \"You are a helpful coding assistant. The user will provide you with code and questions about it. Always give your response in markdown format. It should be always markdown, remember that.\"},\n    ] + chat_session['conversation_history']\n    \n    try:\n        if model == \"anthropic/claude-3.5-sonnet\":\n            response = client_anthropic.messages.create(\n                model=\"claude-3-sonnet-20240229\",\n                temperature=0,\n                max_tokens = 4096,\n                system=\"You are a helpful coding assistant. The user will provide you with code and questions about it. Always return your output in markdown so that i can correctly render it.\",\n                messages=chat_session['conversation_history']\n            )\n        else:\n            response = client.chat.completions.create(\n                model=model,\n                messages=messages\n            )\n\n        ai_response = \"\"\n\n        if model == \"anthropic/claude-3.5-sonnet\":\n            ai_response = response.content[0].text\n        else:\n            ai_response = response.choices[0].message.content\n        \n        # Add the AI's response to the conversation history\n        chat_session['conversation_history'].append({\"role\": \"assistant\", \"content\": ai_response})\n        \n        # Limit the conversation history to the last 10 messages (5 exchanges)\n        if len(chat_session['conversation_history']) > 10:\n            chat_session['conversation_history'] = chat_session['conversation_history'][-10:]\n        \n        # Save the updated chat session\n        save_chat_session(chat_session)\n        \n        return jsonify({\"status\": \"success\", \"response\": ai_response})\n    except Exception as e:\n        print(\"Error:\", str(e))\n        return jsonify({\"status\": \"error\", \"message\": str(e)})\n\n# Add this route to clear the chat session\n@app.route('/clear_chat_session', methods=['POST'])\ndef clear_chat_session():\n    if os.path.exists(CHAT_SESSION_FILE):\n        os.remove(CHAT_SESSION_FILE)\n    return jsonify({\"status\": \"success\", \"message\": \"Chat session cleared\"})\n\n# Call this function when your Flask app starts\ndef initialize_chat_session():\n    if not os.path.exists(CHAT_SESSION_FILE):\n        save_chat_session({\"conversation_history\": [], \"tagged_file_contents\": {}})\n\n\n\n@app.route('/ai_suggestion', methods=['POST'])\ndef ai_suggestion():\n    data = request.json\n    prompt = data['prompt']\n    selected_code = data['code']\n    \n    try:\n        # Prepare the messages for the API call\n        messages = [\n            {\"role\": \"system\", \"content\": \"You are an AI coding assistant. Provide code suggestions based on the given prompt and selected code. Only return the suggested code, without any explanations or markdown formatting.\"},\n            {\"role\": \"user\", \"content\": f\"Prompt: {prompt}\\n\\nSelected Code:\\n{selected_code}\"}\n        ]\n        \n        response = client.chat.completions.create(\n            model=\"openai/gpt-4o-mini\",  # You can change this to the desired model\n            messages=messages\n        )\n        \n        ai_suggestion = response.choices[0].message.content.strip()\n        \n        return jsonify({\"status\": \"success\", \"suggestion\": ai_suggestion})\n    except Exception as e:\n        print(\"Error:\", str(e))\n        return jsonify({\"status\": \"error\", \"message\": str(e)})\n\n\n\n\ndef get_current_directory():\n    return session.get('current_directory', os.getcwd())\n\n\n\n@app.route('/hardware_stats')\ndef hardware_stats():\n    cpu_usage = psutil.cpu_percent()\n    memory = psutil.virtual_memory()\n    disk = psutil.disk_usage('/')\n\n    stats = {\n        'cpu_usage': round(cpu_usage, 1),\n        'memory_used': round(memory.used / (1024**3), 1),\n        'memory_total': round(memory.total / (1024**3), 1),\n        'disk_used': round(disk.used / (1024**3), 1),\n        'disk_total': round(disk.total / (1024**3), 1)\n    }\n    \n    logging.info(f\"Hardware stats: {stats}\")\n    return jsonify(stats)\n\n\n\n@socketio.on('connect', namespace='/terminal')\ndef terminal_connect():\n    print('Client connected to terminal')\n\n@socketio.on('disconnect', namespace='/terminal')\ndef terminal_disconnect():\n    print('Client disconnected from terminal')\n\n@socketio.on('command', namespace='/terminal')\ndef handle_command(command):\n    print(f'Received command: {command}')\n    try:\n        # Execute the command\n        result = subprocess.run(command, shell=True, capture_output=True, text=True, timeout=10)\n        output = result.stdout + result.stderr\n        if not output:\n            output = f\"Command executed: {command}\\n\"\n    except subprocess.TimeoutExpired:\n        output = \"Command execution timed out\\n\"\n    except Exception as e:\n        output = f\"Error executing command: {str(e)}\\n\"\n    \n    emit('output', output)\n\n\n\n\nimport html\n\n@app.route('/git_diff', methods=['POST'])\ndef git_diff():\n    try:\n        directory = session.get('current_directory', '')\n        if not directory:\n            return jsonify({\"status\": \"error\", \"message\": \"No directory selected\"})\n        \n        commit_hash = request.json.get('commit_hash', 'HEAD')\n        \n        result = subprocess.run(['git', 'diff', commit_hash],\n                                cwd=directory,\n                                capture_output=True,\n                                text=True,\n                                check=True)\n        \n        diff_lines = result.stdout.split('\\n')\n        processed_diff = []\n        current_file = \"\"\n        line_number_old = 0\n        line_number_new = 0\n        \n        for line in diff_lines:\n            # Escape HTML characters to prevent rendering\n            escaped_line = html.escape(line)\n            \n            if line.startswith('diff --git'):\n                if current_file:\n                    processed_diff.append('</table></div>')\n                current_file = line.split()[-1].split('/')[-1]\n                processed_diff.append(f'<div class=\"diff-file\"><h3>{html.escape(current_file)}</h3><table>')\n                line_number_old = 0\n                line_number_new = 0\n            elif line.startswith('+++') or line.startswith('---'):\n                processed_diff.append(f'<tr><td colspan=\"3\" class=\"diff-header\">{escaped_line}</td></tr>')\n            elif line.startswith('@@'):\n                match = re.match(r'@@ -(\\d+),\\d+ \\+(\\d+),\\d+ @@', line)\n                if match:\n                    line_number_old = int(match.group(1))\n                    line_number_new = int(match.group(2))\n                processed_diff.append(f'<tr><td colspan=\"3\" class=\"diff-header\">{escaped_line}</td></tr>')\n            else:\n                if line.startswith('+'):\n                    processed_diff.append(f'<tr class=\"diff-added\"><td></td><td>{line_number_new}</td><td>{escaped_line}</td></tr>')\n                    line_number_new += 1\n                elif line.startswith('-'):\n                    processed_diff.append(f'<tr class=\"diff-removed\"><td>{line_number_old}</td><td></td><td>{escaped_line}</td></tr>')\n                    line_number_old += 1\n                else:\n                    processed_diff.append(f'<tr><td>{line_number_old}</td><td>{line_number_new}</td><td>{escaped_line}</td></tr>')\n                    line_number_old += 1\n                    line_number_new += 1\n        \n        if current_file:\n            processed_diff.append('</table></div>')\n        \n        html_diff = '\\n'.join(processed_diff)\n        \n        return jsonify({\"status\": \"success\", \"diff\": html_diff})\n    except subprocess.CalledProcessError as e:\n        return jsonify({\"status\": \"error\", \"message\": f\"Git diff failed: {e.stderr}\"})\n    except Exception as e:\n        return jsonify({\"status\": \"error\", \"message\": str(e)})\n\n\n\n\n\n@app.route('/git_info')\ndef get_git_info():\n    try:\n        directory = session.get('current_directory', '')\n        if not directory:\n            return jsonify({\"status\": \"error\", \"message\": \"No directory selected\"})\n\n        # Get current branch\n        branch = subprocess.check_output(['git', 'rev-parse', '--abbrev-ref', 'HEAD'], \n                                         cwd=directory, text=True).strip()\n\n        # Get commit hash\n        commit_hash = subprocess.check_output(['git', 'rev-parse', '--short', 'HEAD'], \n                                              cwd=directory, text=True).strip()\n\n        # Get number of modified files\n        status_output = subprocess.check_output(['git', 'status', '--porcelain'], \n                                                cwd=directory, text=True)\n        modified_files = len(status_output.splitlines())\n\n        # Get number of unpushed commits\n        unpushed = subprocess.check_output(['git', 'log', '@{u}..'], \n                                           cwd=directory, text=True)\n        unpushed_commits = len(unpushed.splitlines()) // 6  # Divide by 6 as each commit has 6 lines in the log\n\n        return jsonify({\n            \"status\": \"success\",\n            \"branch\": branch,\n            \"commit\": commit_hash,\n            \"modified_files\": modified_files,\n            \"unpushed_commits\": unpushed_commits\n        })\n    except subprocess.CalledProcessError as e:\n        return jsonify({\"status\": \"error\", \"message\": f\"Git command failed: {str(e)}\"})\n    except Exception as e:\n        return jsonify({\"status\": \"error\", \"message\": str(e)})\n\n\n\n@app.route('/get_commits', methods=['GET'])\ndef get_commits():\n    try:\n        directory = session.get('current_directory', '')\n        if not directory:\n            return jsonify({\"status\": \"error\", \"message\": \"No directory selected\"})\n        \n        result = subprocess.run(['git', 'log', '--pretty=format:%H|%s', '-n', '50'],\n                                cwd=directory,\n                                capture_output=True,\n                                text=True,\n                                check=True)\n        \n        commits = [{'hash': line.split('|')[0], 'message': line.split('|')[1]} \n                   for line in result.stdout.split('\\n') if line]\n        \n        return jsonify({\"status\": \"success\", \"commits\": commits})\n    except subprocess.CalledProcessError as e:\n        return jsonify({\"status\": \"error\", \"message\": f\"Failed to get commits: {e.stderr}\"})\n    except Exception as e:\n        return jsonify({\"status\": \"error\", \"message\": str(e)})\n\n\n\n\n\n\n\n@app.route('/add_file', methods=['POST'])\ndef add_file():\n    data = request.json\n    file_path = data.get('file_path')\n    \n    if not file_path:\n        return jsonify({\"status\": \"error\", \"message\": \"File path is required\"})\n    \n    try:\n        session_state = load_session_state()\n        current_directory = session_state.get(\"selected_directory\", os.getcwd())\n        full_path = os.path.join(current_directory, file_path)\n        \n        # Create any necessary directories\n        os.makedirs(os.path.dirname(full_path), exist_ok=True)\n        \n        # Create the file\n        with open(full_path, 'w') as f:\n            pass  # Create an empty file\n        \n        return jsonify({\"status\": \"success\", \"message\": f\"File created: {file_path}\"})\n    except Exception as e:\n        return jsonify({\"status\": \"error\", \"message\": str(e)})\n\n@app.route('/rename_file', methods=['POST'])\ndef rename_file():\n    data = request.json\n    old_path = data.get('old_path')\n    new_path = data.get('new_path')\n    \n    if not old_path or not new_path:\n        return jsonify({\"status\": \"error\", \"message\": \"Both old and new file paths are required\"})\n    \n    try:\n        session_state = load_session_state()\n        current_directory = session_state.get(\"selected_directory\", os.getcwd())\n        full_old_path = os.path.join(current_directory, old_path)\n        full_new_path = os.path.join(current_directory, new_path)\n        \n        if os.path.isfile(full_old_path):\n            os.rename(full_old_path, full_new_path)\n            return jsonify({\"status\": \"success\", \"message\": f\"File renamed from {old_path} to {new_path}\"})\n        else:\n            return jsonify({\"status\": \"error\", \"message\": f\"File not found: {old_path}\"})\n    except Exception as e:\n        return jsonify({\"status\": \"error\", \"message\": str(e)})\n\n@app.route('/delete_file', methods=['POST'])\ndef delete_file():\n    data = request.json\n    file_path = data.get('file_path')\n    \n    if not file_path:\n        return jsonify({\"status\": \"error\", \"message\": \"File path is required\"})\n    \n    try:\n        session_state = load_session_state()\n        current_directory = session_state.get(\"selected_directory\", os.getcwd())\n        full_path = os.path.join(current_directory, file_path)\n        \n        if os.path.isfile(full_path):\n            os.remove(full_path)\n            return jsonify({\"status\": \"success\", \"message\": f\"File deleted: {file_path}\"})\n        else:\n            return jsonify({\"status\": \"error\", \"message\": f\"File not found: {file_path}\"})\n    except Exception as e:\n        return jsonify({\"status\": \"error\", \"message\": str(e)})\n\n\n\n\n\n\n\n@app.route('/add_folder', methods=['POST'])\ndef add_folder():\n    data = request.json\n    folder_path = data.get('folder_path')\n    \n    if not folder_path:\n        return jsonify({\"status\": \"error\", \"message\": \"Folder path is required\"})\n    \n    try:\n        session_state = load_session_state()\n        current_directory = session_state.get(\"selected_directory\", os.getcwd())\n        full_path = os.path.join(current_directory, folder_path)\n        \n        os.makedirs(full_path, exist_ok=True)\n        \n        return jsonify({\"status\": \"success\", \"message\": f\"Folder created: {folder_path}\"})\n    except Exception as e:\n        return jsonify({\"status\": \"error\", \"message\": str(e)})\n\n@app.route('/delete_folder', methods=['POST'])\ndef delete_folder():\n    data = request.json\n    folder_path = data.get('folder_path')\n    \n    if not folder_path:\n        return jsonify({\"status\": \"error\", \"message\": \"Folder path is required\"})\n    \n    try:\n        session_state = load_session_state()\n        current_directory = session_state.get(\"selected_directory\", os.getcwd())\n        full_path = os.path.join(current_directory, folder_path)\n        \n        if os.path.isdir(full_path):\n            shutil.rmtree(full_path)\n            return jsonify({\"status\": \"success\", \"message\": f\"Folder deleted: {folder_path}\"})\n        else:\n            return jsonify({\"status\": \"error\", \"message\": f\"Folder not found: {folder_path}\"})\n    except Exception as e:\n        return jsonify({\"status\": \"error\", \"message\": str(e)})\n\n@app.route('/rename_folder', methods=['POST'])\ndef rename_folder():\n    data = request.json\n    old_path = data.get('old_path')\n    new_path = data.get('new_path')\n    \n    if not old_path or not new_path:\n        return jsonify({\"status\": \"error\", \"message\": \"Both old and new folder paths are required\"})\n    \n    try:\n        session_state = load_session_state()\n        current_directory = session_state.get(\"selected_directory\", os.getcwd())\n        full_old_path = os.path.join(current_directory, old_path)\n        full_new_path = os.path.join(current_directory, new_path)\n        \n        if os.path.isdir(full_old_path):\n            os.rename(full_old_path, full_new_path)\n            return jsonify({\"status\": \"success\", \"message\": f\"Folder renamed from {old_path} to {new_path}\"})\n        else:\n            return jsonify({\"status\": \"error\", \"message\": f\"Folder not found: {old_path}\"})\n    except Exception as e:\n        return jsonify({\"status\": \"error\", \"message\": str(e)})\n\n\n\n\n\ninitialize_chat_session()\n\n\n@app.route('/git_push', methods=['POST'])\ndef git_push():\n    try:\n        data = request.json\n        commit_message = data['commit_message']\n        \n        # Get the current directory\n        current_directory = session.get('current_directory', os.getcwd())\n        \n        # Execute Git commands\n        subprocess.run(['git', 'add', '.'], cwd=current_directory, check=True)\n        subprocess.run(['git', 'commit', '-m', commit_message], cwd=current_directory, check=True)\n        \n        # Get the current branch name\n        branch = subprocess.check_output(['git', 'rev-parse', '--abbrev-ref', 'HEAD'], \n                                         cwd=current_directory, text=True).strip()\n        \n        # Push to the current branch\n        subprocess.run(['git', 'push', 'origin', branch], cwd=current_directory, check=True)\n        \n        return jsonify({\"status\": \"success\", \"message\": \"Git push completed successfully\"})\n    except subprocess.CalledProcessError as e:\n        return jsonify({\"status\": \"error\", \"message\": f\"Git command failed: {str(e)}\"})\n    except Exception as e:\n        return jsonify({\"status\": \"error\", \"message\": str(e)})\n\nif __name__ == '__main__':\n    socketio.run(app, debug = True, port = 5000)"
  }
}